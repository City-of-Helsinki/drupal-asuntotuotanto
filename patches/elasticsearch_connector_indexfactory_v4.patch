diff --git a/src/SearchAPI/IndexParamBuilder.php b/src/SearchAPI/IndexParamBuilder.php
index 9d84fe8..4deeb1d 100644
--- a/src/SearchAPI/IndexParamBuilder.php
+++ b/src/SearchAPI/IndexParamBuilder.php
@@ -7,7 +7,10 @@ use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Item\FieldInterface;
 use Drupal\search_api\Item\ItemInterface;
 use Drupal\search_api\Plugin\search_api\data_type\value\TextValue;
+use Drupal\search_api\Utility\Utility;
 use Drupal\search_api\Utility\FieldsHelperInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\file\Entity\File;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;

 /**
@@ -50,10 +53,18 @@ class IndexParamBuilder {
       $this->addSpecialFields($index, $item);
       /** @var \Drupal\search_api\Item\FieldInterface $field */
       foreach ($item as $field) {
-        $field_type = $field->getType();
         if (!empty($field->getValues())) {
-          $values = $this->buildFieldValues($field, $field_type);
-          $data[$field->getFieldIdentifier()] = $values;
+          $value = [];
+
+          foreach ($field->getValues() as $val) {
+            if (self::isFieldList($index, $field)) {
+              $value[] = self::getFieldValue($field, $val);
+            }
+            else {
+              $value = self::getFieldValue($field, $val);
+            }
+          }
+          $data[$field->getFieldIdentifier()] = $value;
         }
       }
       $params['body'][] = ['index' => ['_id' => $id, '_index' => $indexId]];
@@ -115,4 +126,127 @@ class IndexParamBuilder {
     return $values;
   }

+  /**
+   * Helper function. Returns the elasticsearch value for a given field.
+   *
+   * @param string $field
+   * @param mixed $value
+   *
+   * @return string
+   */
+  protected static function getFieldValue($field, $raw) {
+    $field_type = $field->getType();
+
+    switch ($field_type) {
+      case 'string':
+        $value = (string) $raw;
+        break;
+      case 'text':
+        $value = $raw->toText();
+        break;
+      case 'boolean':
+        $value = (boolean) $raw;
+        break;
+      case 'object':
+        $target = self::objectOfType($field);
+        $value = '';
+
+        if($target == 'taxonomy_term'){
+          $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($raw);
+          $value = $term ? $term->getName() : '';
+        }
+
+        if($target == 'file'){
+          $value = '';
+
+          if ($file = File::load($raw)){
+            $value = $file->createFileUrl(FALSE);
+          }
+        }
+
+        if($target == 'datetime' || $target == 'date'){
+          $format = 'c';
+
+          try {
+            $dt = new \DateTime($raw);
+            $value = $dt->format($format);
+          }
+          catch(\Exception $e) {
+            $value = '';
+          }
+        }
+        break;
+      case 'integer':
+        $value = (integer) $raw;
+        break;
+      case 'decimal':
+        $value = (float) $raw;
+        break;
+      case 'any':
+        $value = $field->getValues();
+        break;
+      default:
+        $value = $raw;
+    }
+
+    return $value;
+  }
+
+  /**
+   * Helper function. Returns true if the field is a list of values.
+   *
+   * @param \Drupal\search_api\IndexInterface $index
+   * @param \Drupal\search_api\Item\Field $field
+   *
+   * @return bool
+   */
+  protected static function isFieldList($index, $field) {
+    $is_list = FALSE;
+
+    // Fix for search_api_id, search_api_datasource & search_api_language fields.
+    if (str_contains($field->getFieldIdentifier(), 'search_')) {
+      return FALSE;
+    }
+
+    // Ensure we get the field definition for the root/parent field item (ie tags).
+    $property_definitions =  $index->getPropertyDefinitions($field->getDatasourceId());
+    $root_property = Utility::splitPropertyPath($field->getPropertyPath(), FALSE)[0];
+    $field_definition = $property_definitions[$root_property];
+
+    // Using $field_definition->isList() doesn't seem to be accurate, so we
+    // check the fieldStorage cardinality !=1.
+    if ($field_definition instanceof FieldDefinitionInterface) {
+      $storage = $field_definition->getFieldStorageDefinition();
+
+      if (1 != $storage->getCardinality()) {
+        return TRUE;
+      }
+    }
+
+    if ($field->getDataDefinition()->getFieldDefinition()->getFieldStorageDefinition()->getCardinality() === -1) {
+      return TRUE;
+    }
+
+    return $is_list;
+  }
+
+  /**
+   * Helper function. Returns the type of the object.
+   *
+   * @param \Drupal\search_api\Item\Field $field
+   *
+   * @return string
+   */
+  protected static function objectOfType($field) {
+    $field_settings = $field->getDataDefinition()->getFieldDefinition()->getSettings();
+
+    if (isset($field_settings['target_type'])) {
+      return $field_settings['target_type'];
+    }
+
+    if (isset($field_settings['datetime_type'])) {
+      return $field_settings['datetime_type'];
+    }
+  }
+
 }
