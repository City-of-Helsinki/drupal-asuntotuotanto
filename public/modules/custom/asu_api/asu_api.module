<?php

/**
 * @file
 * Contains hooks for ASU API.
 */

declare(strict_types = 1);

use Drupal\asu_api\Api\BackendApi\Request\GetApartmentRevaluationsRequest;
use Drupal\asu_api\Api\BackendApi\Request\GetApartmentStatusRequest;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\Response;

/**
 * Implements hook_cron().
 */
function asu_api_cron() {
  // Update apartments adjusted_right_of_occupancy_payment and
  // alteration_work_total values.
  asu_api_get_apartment_revaluation_cron();
  asu_api_get_apartment_status_request_cron();
}

/**
 * Get apartment revaluation cron.
 */
function asu_api_get_apartment_revaluation_cron() {
  $apartment_revaluation = NULL;

  try {
    /** @var \Drupal\asu_api\Api\BackendApi\BackendApi $api */
    $api = \Drupal::service('asu_api.backendapi');
    $request = new GetApartmentRevaluationsRequest();
    /** @var \Drupal\asu_api\Api\BackendApi\Response\GetApartmentRevaluationsResponse $response */
    $response = $api->send($request);
    $apartment_revaluation = $response->getContent();

    if (empty($apartment_revaluation)) {
      return;
    }

    foreach ($apartment_revaluation as $revaluation) {
      // Get apartment based uuid.
      $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
      $query->condition('type', 'apartment')
        ->condition('uuid', $revaluation['apartment_uuid'], '=');
      $apartment = $query->accessCheck(TRUE)->execute();

      if ($apartment) {
        // Load node object.
        $node = Node::load(reset($apartment));
        // Set adjusted_right_of_occupancy_payment value.
        $node->set('field_right_of_occupancy_payment', $revaluation['right_of_occupancy_payment_adjustment']);
        // Set alteration_work_total value.
        $node->set('field_alteration_work', $revaluation['alteration_work_total']);
        // Set field_release_payment value.
        $node->set('field_release_payment', $revaluation['release_payment']);
        // Set field_index_adjusted_right_of_oc value.
        // @ToDo: Once Django gets updated make sure that we use the right field
        $node->set('field_index_adjusted_right_of_oc', $revaluation['index_adjusted_right_of_oc']);
        // Save node.
        $node->save();
      }
    }
  }
  catch (\Exception $e) {
    Drupal::logger('asu_cron')->critical('Unable to fetch revaluations');
  }
}

/**
 * Implements hook_cron().
 *
 * Update apartments state of sale sold status.
 */
function asu_api_get_apartment_status_request_cron() {
  try {
    /** @var \Drupal\asu_api\Api\BackendApi\BackendApi $api */
    $api = \Drupal::service('asu_api.backendapi');
    $request = new GetApartmentStatusRequest();
    /** @var \Drupal\asu_api\Api\BackendApi\Response\GetApartmentStatusResponse $response */
    $response = $api->send($request);
    $apartment_states = $response->getContent();

    if (empty($apartment_states)) {
      return;
    }
  }
  catch (\Exception $e) {
    return new Response('problem with request.', 400);
  }

  // Get apartment uuids.
  $apartment_uuids = array_keys($apartment_states);

  // Get all aparments which state is not sold.
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $query->condition('status', 1)
    ->condition('type', 'apartment')
    ->condition('uuid', $apartment_uuids, 'IN');
  $apartments = $query->accessCheck(TRUE)->execute();

  foreach ($apartments as $apartment) {
    // Load node object by nid.
    $node = Node::load($apartment);
    // Node get uuid.
    $uuid = $node->uuid();
    // Get apartment status from $apartment_states.
    $state = strtolower($apartment_states[$uuid]);
    // Update node apartment state of sale to sold.
    $node->field_apartment_state_of_sale->target_id = $state;
    // Save node.
    $node->save();
  }
}
