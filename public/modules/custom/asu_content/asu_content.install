<?php

/**
 * @file
 * Contains installation functions for asu content.
 */

declare(strict_types=1);

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Symfony\Component\Yaml\Yaml;

/**
 * Manually update asu admin blocks to support Gin region format.
 */
function asu_content_update_9002(): void {
  $theme_handler = Drupal::service('theme_handler');
  $config_factory = \Drupal::configFactory();
  $config_location = dirname(__FILE__) . '/config/install/';

  // Install configurations if asu_admin theme exists.
  if ($theme_handler->themeExists('asu_admin')) {
    $asu_admin_page_title = $config_factory->getEditable('block.block.asu_admin_page_title');
    $asu_admin_page_title_data = $asu_admin_page_title->getRawData();
    if (!empty($asu_admin_page_title_data)) {
      $asu_admin_page_title_data['region'] = 'header';
      $asu_admin_page_title_data['weight'] = -7;
      $asu_admin_page_title->setData($asu_admin_page_title_data)->save(TRUE);
    }

    $asu_admin_branding = $config_factory->getEditable('block.block.asu_admin_branding');
    $asu_admin_branding_data = $asu_admin_branding->getRawData();
    if (!empty($asu_admin_branding_data)) {
      $asu_admin_branding_data['region'] = 'breadcrumb';
      $asu_admin_branding_data['weight'] = -5;
      $asu_admin_branding->setData($asu_admin_branding_data)->save(TRUE);
    }

    $asu_admin_breadcrumbs = $config_factory->getEditable('block.block.asu_admin_breadcrumbs');
    $asu_admin_breadcrumbs_data = $asu_admin_breadcrumbs->getRawData();
    if (!empty($asu_admin_breadcrumbs_data)) {
      $asu_admin_breadcrumbs_data['region'] = 'breadcrumb';
      $asu_admin_breadcrumbs_data['weight'] = -4;
      $asu_admin_breadcrumbs->setData($asu_admin_breadcrumbs_data)->save(TRUE);
    }

    $asu_admin_language_switcher = $config_factory->getEditable('block.block.language_switcher_admin');
    $asu_admin_language_switcher_data = $asu_admin_language_switcher->getRawData();
    if (!empty($asu_admin_language_switcher_data)) {
      $asu_admin_language_switcher_data['weight'] = -6;
      $asu_admin_language_switcher->setData($asu_admin_language_switcher_data)->save(TRUE);
    }

    $asu_admin_local_tasks = $config_factory->getEditable('block.block.asu_admin_local_tasks');
    $asu_admin_local_tasks_data = $asu_admin_local_tasks->getRawData();
    if (!empty($asu_admin_local_tasks_data)) {
      $asu_admin_local_tasks->delete();
    }

    $configurations = [
      'block.block.asu_admin_primary_local_tasks',
      'block.block.asu_admin_secondary_local_tasks',
      'block.block.asu_admin_content',
    ];

    foreach ($configurations as $config_name) {
      $filepath = "{$config_location}{$config_name}.yml";
      if (file_exists($filepath)) {
        $data = Yaml::parse(file_get_contents($filepath));
        if (is_array($data)) {
          $config_factory->getEditable($config_name)->setData($data)->save(TRUE);
        }
      }
    }
  }
}

/**
 * Set field max length 3 chars.
 */
function asu_content_update_9003(): void {
  // Prepare relevant variables.
  $entity_type = 'node';
  $field_name = 'field_property_number';
  $field_length = 3;

  \Drupal::database()->truncate("{$entity_type}__{$field_name}")->execute();
  \Drupal::database()->truncate("{$entity_type}_revision__{$field_name}")->execute();

  // Update database schema.
  $database = \Drupal::database();
  // Resize the main field data table.
  $database->query("ALTER TABLE {$entity_type}__{$field_name} MODIFY {$field_name}_value VARCHAR({$field_length})");
  // Resize the revision field data table (if revisions are enabled).
  $database->query("ALTER TABLE {$entity_type}_revision__{$field_name} MODIFY {$field_name}_value VARCHAR({$field_length})");

  // Update storage schema.
  $storage_key = $entity_type . '.field_schema_data.' . $field_name;
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema[$entity_type . '__' . $field_name]['fields'][$field_name . '_value']['length'] = $field_length;
  $field_schema[$entity_type . '_revision__' . $field_name]['fields'][$field_name . '_value']['length'] = $field_length;
  $storage_schema->set($storage_key, $field_schema);

  // Update field configuration.
  $config = \Drupal::configFactory()
    ->getEditable("field.storage.{$entity_type}.{$field_name}");
  $config->set('settings.max_length', $field_length);
  $config->save(TRUE);

  // Update field storage configuration.
  FieldStorageConfig::loadByName($entity_type, $field_name)->save();
}

/**
 * Remove field_unit_ tables and update content & paragraphs field.
 */
function asu_content_update_9004(): void {
  $drop_tables = [
    'node__field_unit_alternative_image',
    'node__field_unit_is_parent',
    'node__field_unit_long_description',
    'node__field_unit_main_image_url',
    'node__field_unit_parent_unit',
    'node__field_unit_short_description',
    'node__field_unit_visible_title',
  ];

  foreach ($drop_tables as $drop_table) {
    \Drupal::database()->schema()->dropTable($drop_table);
    \Drupal::database()->schema()->dropTable("node_revision__$drop_table");
  }

  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();

  $change_summary = \Drupal::service('entity.definition_update_manager')->getChangeSummary();

  foreach ($change_summary as $entity_type_id => $change_list) {
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
  }
}

/**
 * Switch field type for the email paragraphs field.
 */
function asu_content_update_9005(): void {
  $database = \Drupal::database();
  $entity_type = 'paragraph';
  $field_name = 'field_email';
  $table = "paragraph__field_email";
  $field_data = NULL;
  $new_fields = [];
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

  if (is_null($field_storage)) {
    return;
  }

  // Get all field data from database.
  if ($database->schema()->tableExists($table)) {
    $field_data = $database->select($table, 'n')
      ->fields('n')
      ->execute()
      ->fetchAll();
  }

  // Use existing field config for new field.
  foreach ($field_storage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
    $new_field = $field->toArray();
    $new_field['field_type'] = 'email';
    $new_field['settings'] = [];
    $new_fields[] = $new_field;
  }

  // Deleting field storage which will also delete bundles(fields).
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'email';
  $new_field_storage['settings'] = [
    'max_length' => 255,
    'case_sensitive' => FALSE,
    'is_ascii' => FALSE,
  ];

  $field_storage->delete();

  // Purge field data now to allow new field and field_storage with same name
  // to be created.
  field_purge_batch(40);

  // Create new field storage.
  $new_field_storage = FieldStorageConfig::create($new_field_storage);
  $new_field_storage->save();

  // Create new fields.
  foreach ($new_fields as $new_field) {
    $new_field_config = FieldConfig::create($new_field);
    $new_field_config->save();
  }

  // Restore existing data in new table.
  if (!is_null($field_data)) {
    foreach ($field_data as $data) {
      $database->insert($table)
        ->fields((array) $data)
        ->execute();
    }
  }
}

/**
 * Remove all content for Article, Gallery and Gallery slide types.
 */
function asu_content_update_9006(): void {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $entities = $node_storage->loadByProperties(['type' => 'article']);
  $node_storage->delete($entities);

  foreach (['gallery', 'gallery_slide'] as $paragraph_type) {
    $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
    $entities = $paragraph_storage->loadByProperties(['type' => $paragraph_type]);
    $paragraph_storage->delete($entities);
  }
}

/**
 * Install external entities module if it doesn't exist.
 */
function asu_content_update_9007(): void {
  $module_installer = \Drupal::service('module_installer');

  if (!\Drupal::moduleHandler()->moduleExists('external_entities')) {
    $module_installer->install(['external_entities']);
  }
}

/**
 * Warns helfi_global_announcement orphaned entries in the system.schema key/value storage.
 */
function asu_content_update_9008(): void {
  \Drupal::keyValue('system.schema')->delete('helfi_global_announcement');
}
