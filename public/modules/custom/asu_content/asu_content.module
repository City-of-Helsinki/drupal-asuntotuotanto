<?php

/**
 * @file
 * Contains hooks for content alterations.
 */

declare(strict_types=1);

use Drupal\asu_content\Entity\Apartment;
use Drupal\asu_content\Entity\Project;
use Drupal\asu_content\ProjectUpdater;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\node\Entity\Node;
use Drupal\node\NodeForm;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function asu_content_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['project'])) {
    $bundles['node']['project']['class'] = Project::class;
  }
  if (isset($bundles['node']['apartment'])) {
    $bundles['node']['apartment']['class'] = Apartment::class;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function asu_content_form_node_form_alter(&$form, $form_state) {
  asu_content_hide_node_title($form);
  asu_content_show_computed_fields($form, $form_state);
  asu_content_project_add_archived_handling($form, $form_state);
}

/**
 * Add archived button logic, button widget positioning is handled in theme.
 */
function asu_content_project_add_archived_handling(&$form, &$form_state) {
  // Add javascript to project form.
  $formObject = $form_state->getFormObject();
  if ($formObject instanceof EntityFormInterface) {
    $entity = $formObject->getEntity();
    if (
      $entity->getEntityTypeId() === 'node'
      && in_array($entity->bundle(), ['project'])
    ) {
      $form['#attached']['library'][] = 'asu_content/asu_editform';
    }
  }
}

/**
 * Hide node title from specified node forms.
 */
function asu_content_hide_node_title(&$form) {
  $forms_to_hide_title_from = [
    'node_apartment_edit_form',
    'node_apartment_form',
  ];

  if (!in_array($form['#form_id'], $forms_to_hide_title_from)) {
    return;
  }

  if (isset($form['title'])) {
    $form['title']['#access'] = FALSE;
  }
}

/**
 * Show computed field on apartment node.
 */
function asu_content_show_computed_fields(&$form, $form_state) {
  if ($form_state->getFormObject() instanceof NodeForm) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity->isNew()) {
      return;
    }
    if (
      $entity->hasField('field_living_area') &&
      $entity->hasField('field_debt_free_sales_price')
    ) {
      if (
        !$entity->field_living_area->value ||
        !$entity->field_debt_free_sales_price
      ) {
        return;
      }

      $price = $entity->field_debt_free_sales_price->value;
      $living_area = $entity->field_living_area->value;

      if ($price && $price != 0 && $living_area && $living_area != 0) {
        $value = number_format((float) $price / $living_area, 2, '.', '');
        $form['field_debt_free_sales_price']['widget'][0]['value']['#description'] = FieldFilteredMarkup::create(
          $value.' €/m²'
        );
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function asu_content_entity_presave(EntityInterface $entity) {
  if (
    $entity instanceof EntityInterface &&
    method_exists($entity, 'getType')
  ) {
    if ($entity->getType() == 'apartment') {
      // Apartment title is generated using project information.
      if (!$entity->isNew()) {
        $title = $entity->getTitle() ?? t('Apartment');
        /** @var \Drupal\asu_content\Entity\Apartment $entity */

        if ($entity->field_apartment_address->first()->getValue()['#markup']) {
          $markup = $entity->field_apartment_address->first()->getValue();
          $title = reset($markup);
        }
        elseif (empty($entity->getTitle())) {
          $title = !empty($entity->field_apartment_number->value)
            ? $entity->field_apartment_number->value
            : $title;
        }
        $entity->setTitle($title);
      }

      // When sold, unpublish apartments.
      if ($entity->isPublished()) {
        if ($entity->field_apartment_state_of_sale->target_id == 'sold') {
          $entity->setUnpublished();
          $entity->set('field_publish_on_oikotie', 0);
          $entity->set('field_publish_on_etuovi', 0);

          \Drupal::messenger()->addMessage(
            t(
              "Apartment @title was sold and is now unpublished.",
              ['@title' => $entity->getTitle()]
            )
          );
        }
      }
    }

    // If project address changes, must apartment address change as well.
    if ($entity->getType() == 'project') {
      $archivedChanged = FALSE;
      $addressChanged = FALSE;
      $housingCompanyChanged = FALSE;
      if ($original = $entity->original) {
        $archivedChanged = ($entity->field_archived->value !== $original->field_archived->value);
        $addressChanged = ($entity->field_street_address->value !== $original->field_street_address->value);
        $housingCompanyChanged = ($entity->field_housing_company->value !== $original->field_housing_company->value);

        if ($addressChanged || $housingCompanyChanged) {
          /** @var \Drupal\asu_content\Entity\Apartment $apartment */
          foreach ($entity->getApartmentEntities() as $apartment) {
            $address = "{$entity->field_street_address->value} {$apartment->field_apartment_number->value}";
            $apartment->set('title', $address);
            $apartment->save();
          }
        }
      }

      // Handle archived value
      // Resetting published & archived statuses since project was still published when archiving.
      if (
        $archivedChanged &&
        $entity->field_archived->value == TRUE &&
        $entity->isPublished()
      ) {
        $entity->set('field_archived', FALSE);
        $entity->setPublished();
        \Drupal::messenger()->addWarning(
          t(
            'Project was not unpublished when it was set as archived. Resetted published and archived statuses.'
          )
        );
      }

      // All apartments are not yet set as sold, cannot set project as archived.
      if (
        $archivedChanged &&
        $entity->field_archived->value == TRUE &&
        !$entity->isArchievable()
      ) {
        $entity->set('field_archived', FALSE);
        $entity->setPublished(TRUE);
        \Drupal::messenger()->addWarning(
          t('Project cannot be archived since all the apartments are not sold')
        );
      }

      // Success message.
      if (
        $archivedChanged &&
        $entity->field_archived->value == TRUE &&
        $entity->isArchievable()
      ) {
        \Drupal::messenger()->addStatus(t('Project has been set as archived'));
      }

      $apartment_count = count($entity->getApartmentEntities());
      $entity->set('field_apartment_count', $apartment_count);
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Makes sure to update referred apartments after project node save.
 */
function asu_content_entity_update($entity) {
  if (
    $entity instanceof EntityInterface &&
    method_exists($entity, 'getType') &&
    $entity->getType() == 'project' &&
    $entity->hasField('field_apartments')
  ) {
    asuQueueWorker($entity);
  }
}

/**
 * Implements hook_node_insert().
 *
 * On empty project, pre-create placeholder apartment.
 */
function asu_content_node_insert(Node $node) {
  if (
    method_exists($node, 'getType') &&
    $node->getType() == 'project' &&
    $node->hasField('field_apartments')
  ) {
    // If we are importing from csv, stop the process.
    if (
      $node->hasField('field_import_apartments') &&
      !$node->get('field_import_apartments')->isEmpty()
    ) {
      return;
    }

    if ($node->field_apartments->isEmpty()) {
      $apartment = Node::create([
        'type' => 'apartment',
        'title' => 'A0',
        'field_apartment_number' => 'A0',
        'status' => 1,
      ]);
      $apartment->save();

      $node->get('field_apartments')->setValue([$apartment]);
      $node->save();
      asuQueueWorker($node);
    }
  }

  if (
    method_exists($node, 'getType') &&
    $node->getType() == 'apartment'
  ) {
    asuQueueWorker($node);
  }
}

/**
 * Implements hook_cron().
 *
 * Update projects/apartments automatically based on dates set on project.
 */
function asu_content_cron() {
  $entity = \Drupal::entityTypeManager()->getStorage('node');
  $query = $entity->getQuery();
  $now = DrupalDateTime::createFromTimestamp(time());
  $projectUpdater = new ProjectUpdater();

  $query->condition('type', 'project')
    ->condition('status', 1)
    ->condition('field_state_of_sale', 'for_sale', '<>')
    ->condition('field_application_start_time', $now, '<')
    ->condition('field_application_end_time', $now, '>');
  $projectsToUpdateForSale = $query->accessCheck(TRUE)->execute();

  if (!empty($projectsToUpdateForSale)) {
    try {
      $projects = Node::loadMultiple($projectsToUpdateForSale);
      foreach ($projects as $project) {
        $projectUpdater->updateProjectStateToForSale($project);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('asu_cron')->emergency(
        'Unable to update projects to "For sale" state: '.$e->getMessage()
      );
    }
    $projects = NULL;
  }

  $query2 = $entity->getQuery();

  $query2->condition('type', 'project')
    ->condition('status', 1)
    ->condition('field_state_of_sale', 'for_sale')
    ->condition('field_application_end_time', $now, '<');
  $projectsToUpdateReserved = $query2->accessCheck(TRUE)->execute();

  if ($projectsToUpdateReserved) {
    try {
      $projects = Node::loadMultiple($projectsToUpdateReserved);
      foreach ($projects as $project) {
        $projectUpdater->updateProjectStateToReserved($project);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('asu_cron')->emergency(
        'Unable to update projects to "Reserved" state: '.$e->getMessage()
      );
    }
  }
}

/**
 * Queue worker.
 */
function asuQueueWorker($entity) {
  if (
    $entity instanceof Apartment &&
    method_exists($entity, 'getType') &&
    $entity->getType() == 'apartment'
  ) {
    if ($project = $entity->getProject()) {
      asuSetQueueWorker($project);
    }
  }

  if (
    $entity instanceof Project &&
    method_exists($entity, 'getType') &&
    $entity->getType() == 'project'
  ) {
    asuSetQueueWorker($entity);
  }
}

/**
 * Set queue worker.
 */
function asuSetQueueWorker($project) {
  if ($project->getOwnershipType()) {
    // Get project apartment entities.
    $apartment_entities = $project->getApartmentEntities();
    $queue = \Drupal::service('queue')->get('asu_content_queue_worker');

    // Get apartment ids.
    foreach ($apartment_entities as $apartments_id) {
      $item = new \stdClass();
      $item->nid = $apartments_id->id();
      $queue->createItem($item);
    }
  }
}

/**
 * Convert datetime.
 */
function asu_content_convert_datetime($value): string {
  /** @var Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');
  $date = $date_formatter->format(
    strtotime($value.' UTC'),
    'custom',
    'Y-m-d\TH:i:sP',
    'Europe/Helsinki',
  );

  return $date;
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function asu_content_helfi_paragraph_types(): array {
  $entities = [
    'node' => [
      'page' => [
        'field_content' => [
          'cta_block',
          'showcase_block',
          'steps_list',
        ],
        'field_lower_content' => [
          'cta_block',
          'showcase_block',
          'steps_list',
        ],
      ],
      'landing_page' => [
        'field_content' => [
          'contact_information_with_map',
          'latest_news',
          'liftup_with_image_and_links',
          'showcase_block',
          'stacked_contact_blocks',
          'stacked_text_blocks_with_image',
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType) {
          $enabled[] = new ParagraphTypeCollection(
            $entityTypeId,
            $bundle,
            $field,
            $paragraphType
          );
        }
      }
    }
  }

  return $enabled;
}
