<?php

/**
 * @file
 * Contains asu_content.module.
 */

use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\asu_content\Entity\Apartment;
use Drupal\asu_content\Entity\Project;
use Drupal\asu_content\ProjectUpdater;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeForm;
use Drupal\node\Entity\Node;

function asu_content_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['project'])) {
    $bundles['node']['project']['class'] = Project::class;
  }
  if (isset($bundles['node']['apartment'])) {
    $bundles['node']['apartment']['class'] = Apartment::class;
  }
}

/**
 * Implements hook_help().
 */
function asu_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the asu_content module.
    case 'help.page.asu_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('ASU - Content provides functionalities for creating, providing and altering content.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function asu_content_form_node_form_alter(&$form, $form_state) {
  asu_content_hide_node_title($form);
  asu_content_show_computed_fields($form, $form_state);
}

/**
 * Hide node title from specified node forms.
 *
 * {@inheritDoc}
 */
function asu_content_hide_node_title(&$form) {
  $forms_to_hide_title_from = [
    'node_apartment_edit_form',
    'node_apartment_form',
  ];

  if (!in_array($form['#form_id'], $forms_to_hide_title_from)) {
    return;
  }

  if (isset($form['title'])) {
    $form['title']['#access'] = FALSE;
  }
}

/**
 * Show computed field on apartment node.
 */
function asu_content_show_computed_fields(&$form, $form_state) {
  if ($form_state->getFormObject() instanceof NodeForm) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity->isNew()) {
      return;
    }
    if (
      $entity->hasField('field_living_area') &&
      $entity->hasField('field_debt_free_sales_price')
    ) {
      if (
        !$entity->field_living_area->value ||
        !$entity->field_debt_free_sales_price
      ) {
        return;
      }

      $price = $entity->field_debt_free_sales_price->value;
      $living_area = $entity->field_living_area->value;

      if ($price && $price != 0 && $living_area && $living_area != 0) {
        $value = number_format((float) $price / $living_area, 2, '.', '');
        $form['field_debt_free_sales_price']['widget'][0]['value']['#description'] = FieldFilteredMarkup::create($value . ' €/m²');
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function asu_content_entity_presave(EntityInterface $entity) {
  if (
    $entity instanceof EntityInterface &&
    method_exists($entity, 'getType')
  ) {
    if ($entity->getType() == 'apartment') {
      $title = t('Apartment');

      if ($entity->field_apartment_address->first()->getValue()['#markup']) {
        $markup = $entity->field_apartment_address->first()->getValue();
        $title = reset($markup);
      }
      elseif (empty($entity->getTitle())) {
        $title = !empty($entity->field_apartment_number->value)
          ? $entity->field_apartment_number->value
          : $title;
      }

      $entity->setTitle($title);

      // When sold, unpublish apartments.
      if ($entity->isPublished()) {
        if ($entity->field_apartment_state_of_sale->target_id == 'sold') {
          $entity->setUnpublished();
          $entity->set('field_publish_on_oikotie', 0);
          $entity->set('field_publish_on_etuovi', 0);

          \Drupal::messenger()->addMessage(
            t("Apartment @title was sold and is now unpublished.",
              ['@title' => $entity->title->value]
            )
          );
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function asu_content_entity_update($entity) {
  if (
    $entity instanceof EntityInterface &&
    method_exists($entity, 'getType') &&
    $entity->getType() == 'project' &&
    $entity->hasField('field_apartments')
  ) {
    $apartments = $entity->field_apartments->getValue();
    foreach ($apartments as $apartment) {
      $node = Node::load($apartment['target_id']);
      if ($node->bundle() == 'apartment') {
        $node->save();
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * On empty project, precreate placeholder apartment.
 */
function asu_content_node_insert(Node $node) {
  if (
    method_exists($node, 'getType') &&
    $node->getType() == 'project' &&
    $node->hasField('field_apartments')
  ) {

    // If we are importing from csv, stop the process.
    if (
      $node->hasField('field_import_apartments') &&
      !$node->get('field_import_apartments')->isEmpty()
    ) {
      return;
    }

    if ($node->field_apartments->isEmpty()) {
      $apartment = Node::create([
        'type' => 'apartment',
        'title' => '',
        'field_apartment_number' => 'A0',
        'status' => 0,
      ]);
      $apartment->save();

      $node->get('field_apartments');
      $node->field_apartments->setValue([$apartment]);
      $node->save();
    }
  }

}

/**
 * Implements hook_cron().
 */
function asu_content_cron() {
  $properties = [
    'type' => 'project',
    'status' => 1,
  ];

  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties($properties);

  $logger = Drupal::logger('asu_cron');
  $projectUpdater = new ProjectUpdater($logger);
  $updated = [];
  foreach ($nodes as $node) {
    try {
      $updated[] = $projectUpdater->updateApartmentStateByApplicationTime($node);
    }
    catch (\Exception $e) {
      // The time is most likely not set.
      // @todo Logging.
    }
  }
}
