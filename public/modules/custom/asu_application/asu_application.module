<?php

/**
 * @file
 * Contains asu_application.
 */

use Drupal\asu_application\Entity\Application;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme().
 */
function asu_application_theme() {
  return [
    'asu_application' => [
      'render element' => 'elements',
      'template' => 'asu-application',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function asu_application_theme_suggestions_asu_application(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'asu_application__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function asu_application_form_alter(&$form, &$form_state) {
  if (
    $form['#form_id'] === 'asu_application_hitas_form' ||
    $form['#form_id'] === 'asu_application_haso_form' ||
    $form['#form_id'] === 'asu_application_hitas_add_form' ||
    $form['#form_id'] === 'asu_application_haso_add_form'
  ) {
    if (isset($form['field_data_agreement_policy'])) {
      $hitas = 'https://www.hel.fi/static/liitteet-2019/Kaupunginkanslia/Rekisteriselosteet/Kymp/Helsingin%20kaupungin%20Asuntotuotannon%20Hitas-asuntojen%20hakijarekisteri.pdf';
      $haso = 'https://www.hel.fi/static/liitteet-2019/Kaupunginkanslia/Rekisteriselosteet/Kymp/Asumisoikeusasuntojen%20hakijarekisteri.pdf';
      $link = $form['#form_id'] === 'asu_application_hitas_form' ? $hitas : $haso;

      $form['field_data_agreement_policy']['widget']['value']['#title'] =
        t(
          'I have read <a target="_blank" href="@register">Registry policy</a>
            and city\'s  <a target="_blank" href="@privacy">Privacy Statement</a>',
          [
            '@register' => $link,
            '@privacy' => 'https://www.hel.fi/helsinki/fi/kaupunki-ja-hallinto/tietoa-helsingista/tietosuoja',
          ]
        );
    }

    if (isset($form['field_agreement_policy'])) {
      $form['field_agreement_policy']['widget']['value']['#title'] =
        t('I affirm the correctness of the given data');
    }
  }
}

/**
 * Implements hook_preprocess_form().
 */
function template_preprocess_asu_application(array &$variables) {
  $application = $variables['elements']['#asu_application'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $id = $application->id->value;
  $projectId = $application->getProjectId();
  try {
    /** @var \Drupal\asu_content\Entity\Project $project */
    $project = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($projectId);

    $apartments = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($application->getApartmentIds());

    $apartmentData = [];
    foreach ($apartments as $apartment) {
      $apartmentData[$apartment->id()] = [
        'id' => $apartment->id(),
        'uuid' => $apartment->uuid(),
        'number' => $apartment->field_apartment_number->value,
        'structure' => $apartment->field_apartment_structure->value,
      ];
    }

    $main_image_file_url = NULL;
    if ($project->field_main_image && $project->field_main_image->target_id) {
      $main_image_file = File::load($project->field_main_image->target_id) ?? NULL;

      if ($main_image_file) {
        $main_image_file_url = file_create_url($main_image_file->getFileUri());
      }
    }

    $district = '';
    if ($project->field_district) {
      $district = $project->field_district->first() ?
        $project->field_district->first()->entity->getName() :
        '';
    }

    if (
      $project->hasField('field_application_end_time') &&
      $application_end_time_value = $project->get('field_application_end_time')->value
    ) {
      $date_formatter = \Drupal::service('date.formatter');
      $application_end = $date_formatter->format(
        $project->get('field_application_end_time')->date->getTimestamp(),
        'custom',
        'd.m.Y H:i'
      );
    }

    $application_teaser_values = [
      '#teaser_values' => [
        'application_id' => $application->id->value,
        'project_uuid' => $project->uuid(),
        'language' => \Drupal::languageManager()->getCurrentLanguage()->getId(),
        'project_name' => $project->field_housing_company->value,
        'project_address' => $project->field_street_address->value,
        'project_ownership_type' => $project->field_ownership_type->first()->entity->getName(),
        'project_estimated_completion' => $project->field_estimated_completion->value,
        'application_end_time' => $application_end,
        'project_main_image_url' => $main_image_file_url ?? NULL,
        'project_district' => $district,
        'is_application_period' => $project->isApplicationPeriod(),
        'is_application_period_over' => $project->isApplicationPeriod('after'),
        'application_apartments' => $apartmentData,
        'error' => $application->hasError() ? $application->getError() : FALSE,
      ],
    ];

    if ($variables['elements']['#view_mode'] == 'full') {
      $apartments = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadMultiple($application->getApartmentIds());

      $apartments_data = [];
      foreach ($apartments as $apartment) {
        $apartments_data[$apartment->id()] = [
          'apartment_id' => $apartment->id(),
          'apartment_number' => $apartment->get('field_apartment_number')->getValue(),
          'apartment_structure' => $apartment->get('field_apartment_structure')->getValue(),
          'apartment_floor' => $apartment->get('field_floor')->getValue(),
          'apartment_living_area' => $apartment->get('field_living_area')->getValue(),
          'apartment_sales_price' => $apartment->get('field_sales_price')->getValue(),
          'apartment_debt_free_sales_price' => $apartment->get('field_debt_free_sales_price')->getValue(),
          'apartment_right_of_occupancy_payment' => $apartment->get('field_right_of_occupancy_payment')->getValue(),
        ];
      }

      $application_fields = [
        'application_created_at' => $application->get('created')->getValue(),
        'personal_id' => $application->get('field_personal_id')->getValue(),
        'has_children' => $application->get('has_children')->getValue(),
        'applicant' => $application->get('applicant')->getValue(),
        'apartments' => $application->get('apartment')->getValue(),
        'field_right_of_residence_number' => '',
        'apartments_data' => $apartments_data,
        // 'haso_owner' => $application->get('field_haso_owner')->getValue(),
        'hitas_owner' => '',
        'is_locked' => $application->field_locked->value,
      ];

      if ($application->hasField('field_right_of_residence_number')) {
        $application_fields['field_right_of_residence_number'] = $application->get('field_right_of_residence_number')->getValue();
      }

      if ($application->hasField('field_hitas_owner')) {
        $application_fields['hitas_owner'] = $application->get('field_hitas_owner')->getValue();
      }

      $application_teaser_values['application'] = $application_fields;
    }

    $application_teaser_values['#teaser_values']['application_id'] = $id;

    $application_teaser_values['#teaser_values']['application_url'] =
      $application->isLocked() || !$project->isApplicationPeriod() ? "/application/$id" : "/application/$id/edit";
  }
  catch (\Exception $e) {
    \Drupal::logger('asu_application')->critical(
      sprintf(
        'Error while fetching apartment data for project of id %s: %s',
        $projectId,
        $e->getMessage()
      )
    );
    $application_teaser_values = [];
  }

  $variables['content'] = $application_teaser_values;
}

/**
 * Implements hook_form_alter().
 *
 * Prefill contact form with user information and query parameters.
 */
function asu_user_form_contact_message_apply_for_free_apartment_form_alter(&$form, &$form_state, $form_id) {
  $apartment_id = \Drupal::request()->get('apartment') ?? NULL;
  $project_id = \Drupal::request()->get('project') ?? NULL;

  $apartment = NULL;
  $project = NULL;
  $error = FALSE;
  if (!$apartment_id && !$project_id) {
    $error = TRUE;
  }
  else {
    if ($apartment_id) {
      $apartment = Node::load($apartment_id);
      if ($apartment->bundle() == 'apartment') {
        $project = $apartment->getProject();
      }
      if (!$project) {
        $error = TRUE;
      }
    }
    elseif ($project_id) {
      $project = Node::load($project_id);
      if ($project->bundle() != 'project') {
        $error = TRUE;
      }
    }
    if (!$project && !$apartment) {
      $error = TRUE;
    }
  }

  if ($error == TRUE) {
    \Drupal::messenger(t('Problem while opening contact form'));
    return;
  }

  $form['#contact_form_title'] = $apartment ? $apartment->getTitle() : t('Apply for an apartment');
  $form['#contact_form_text'] = t('Leave your contact information and we will personally contact you regarding this apartment.');
}

/**
 * Implements hook_cron().
 *
 * Delete application drafts for projects which application time has ended.
 */
function asu_application_cron() {
  try {
    $before = (new DrupalDateTime('-29 days'))
      ->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
    $after = (new DrupalDateTime('-31 days'))
      ->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

    // @todo Optimize query with join.
    $projects = \Drupal::entityQuery('node')
      ->condition('type', 'project', '=')
      ->condition('field_application_end_time', [$after, $before], 'BETWEEN')
      ->execute();

    if (!$projects) {
      return;
    }

    $applicationIds = \Drupal::entityTypeManager()
      ->getStorage('asu_application')
      ->getQuery()
      ->condition('project_id', $projects, 'IN')
      ->condition('field_locked', 0, '=')
      ->execute();

    if (!$applicationIds) {
      return;
    }

    $applications = Application::loadMultiple($applicationIds);
    /** @var \Drupal\asu_application\Entity\Application $application */
    foreach ($applications as $application) {
      \Drupal::logger('asu_application')->info('Deleted draft application for project of id: ' . $application->getProjectId());
      $application->delete();
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('asu_application_cron')->critical('Unable to perform application cron operation: ' . $e->getMessage());
  }

}

/**
 * Implements hook_mail().
 */
function asu_application_mail(string $key, array &$message, array $params) {
  switch ($key) {
    case 'apply_for_free_apartment':
      send_apply_for_free_apartment($message, $params);
      break;
  }
}

/**
 * Send confirmation mail to user after application has been created.
 *
 * @param array $message
 *   Message variable.
 * @param array $params
 *   Parameters variable.
 */
function send_apply_for_free_apartment(array &$message, array $params) {
  $message['from'] = \Drupal::config('system.site')->get('mail');
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['message'];
}
