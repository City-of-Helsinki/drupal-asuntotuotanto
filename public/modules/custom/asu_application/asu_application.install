<?php

/**
 * @file
 * Application install functions.
 */

declare(strict_types = 1);

use Drupal\asu_application\Entity\Application;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_install().
 */
function asu_application_install() : void {
  asu_application_grant_permissions();
}

/**
 * Installs error field to application.
 */
function asu_application_update_9001() : void {
  $fields['error'] = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Error'))
    ->setTranslatable(TRUE)
    ->setDefaultValue('');

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'asu_application', 'asu_application', $field);
  }
}

/**
 * Installs project entity reference field to application.
 */
function asu_application_update_9002() : void {
  $fields['project'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Project'))
    ->setSettings([
      'target_type' => 'node',
      'handler_settings' => [
        'target_bundles' => ['project'],
      ],
    ]);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'asu_application', 'asu_application', $field);
  }
}

/**
 * Update all applications' project entity reference field value.
 */
function asu_application_update_9003() : void {
  $applications = Application::loadMultiple();
  foreach ($applications as $application) {
    $application->project->target_id = $application->getProjectId();
    $application->save();
  }
}

/**
 * Update all applications' project entity reference field value.
 */
function asu_application_update_9004() : void {
  $applications = Application::loadMultiple();
  foreach ($applications as $application) {
    $application->project->target_id = $application->getProjectId();
    $application->save();
  }
}

/**
 * Add main applicant fields.
 */
function asu_application_update_9005() : void {
  $fields['main_applicant'] = BaseFieldDefinition::create('asu_main_applicant')
    ->setLabel(t('Basic information'))
    ->setDescription(t('Basic information of the people who are applying'))
    ->setCardinality(1)
    ->setDisplayOptions('form', [
      'type' => 'asu_main_applicant',
    ]);

  foreach ($fields as $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('main_applicant', 'asu_application', 'asu_application', $field);
  }
}

/**
 * Install LYK Form Answer entity.
 */
function asu_application_update_9006() {
  $entity_type = \Drupal::entityTypeManager()->getDefinition('asu_application');
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
}

/**
 * Grants required permissions.
 */
function asu_application_grant_permissions() : void {
  $permissions = [
    'admin' => [
      'administer applications',
    ],
    'anonymous' => [
      'create application',
    ],
    'authenticated' => [
      'create application',
      'view application',
    ],
  ];

  helfi_platform_config_grant_permissions($permissions);
}

/**
 * Add created admin and created by fields to application.
 */
function asu_application_update_9007() : void {
  $fields['created_admin'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Created by admin'))
    ->setDescription(t('A boolean indicating whether application is created by admin.'))
    ->setDefaultValue(FALSE);

  $fields['created_by'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Created by'))
    ->setDescription(t('The creator ID of author of the application entity.'))
    ->setSetting('target_type', 'user')
    ->setSetting('handler', 'default')
    ->setRequired(TRUE)
    ->setReadOnly(TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'asu_application', 'asu_application', $field);
  }
}
