{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{%
  set classes = [
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  'apartment'
]
%}

{% set apartment_structure = content.field_apartment_structure.0 %}
{% set living_area_size_m2 = content.field_living_area.0 %}
{% set application_url = content.field_application_url.0 %}
{% set images = content.field_images %}
{% set floor = content.field_floor.0 %}
{% set sales_price = content.field_sales_price.0 %}
{% set debt_free_sales_price = content.field_debt_free_sales_price.0 %}

<article{{ attributes.addClass(classes) }}>
  <div class="apartment__header container">
    <div class="apartment__header-section apartment__header-section--heading">
      <h1 class="apartment__label">{{ label }}</h1>
      {% if apartment_structure|render or living_area_size_m2|render %}
        <h2 class="apartment__lead">
          {% if apartment_structure|render %}
            <span class="apartment__apartment-structure">{{ apartment_structure }}</span>
          {% endif %}
          <span aria-hidden="true"></span>
          {% if living_area_size_m2|render %}
            <span class="apartment__living-area-size">{{ living_area_size_m2 }} m<sup>2</sup></span>
          {% endif %}
        </h2>
      {% endif %}
    </div>
    {% if is_application_period_active %}
      <div class="apartment__header-section apartment__header-section--actions">
        {% include '@asuntotuotanto/button/button.html.twig' with {
          type: 'primary',
          disabled: false,
          label: 'Create an application'|t,
          href: application_url
          }
        %}
      </div>
    {% endif %}
  </div>

  {% if images|render %}
    <div class="apartment__images">
    {{ images }}
    </div>
  {% endif %}

  <div class="apartment__content-wrapper container">
    <aside class="apartment__sidebar">
      <h3 class="apartment__application-information">
        {% trans %}
          The application period for the destination starts on {{ application_start_time }} and ends on {{ application_end_time }}.
        {% endtrans %}
      </h3>
    </aside>
    <div class="apartment__content">
      <div class="apartment__type-and-address">
        {% if ownership_type|render %}
          <p class="apartment__ownership-type">
            <span class="visually-hidden">({{ 'Ownership type'|t }})</span>
            {{ ownership_type }}
          </p>
        {% endif %}
        {% if district|render and address|render %}
          <p class="apartment__address">{{ district }}, {{ address }}</p>
        {% endif %}
      </div>
      {% if project_description|render %}
        <div class="apartment__information">
          <h2 class="apartment__information-label">
            {% trans %}
              Apartment information
            {% endtrans %}
          </h2>
          <p class="apartment__project-description">{{ project_description }}</p>
        </div>
      {% endif %}
      <div class="apartment__details">
        <h2 class="apartment__details-label">
          {% trans %}
            Details
          {% endtrans %}
        </h2>
        <ul class="apartment__details-list">
          {% if district|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}District{% endtrans %}</span>
                <span>{{ district }}</span>
              </p>
            </li>
          {% endif %}
          {% if building_type|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Building type{% endtrans %}</span>
                <span>{{ building_type }}</span>
              </p>
            </li>
          {% endif %}
          {% if apartment_structure|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Apartment structure{% endtrans %}</span>
                <span>{{ apartment_structure }}</span>
              </p>
            </li>
          {% endif %}
          {% if living_area_size_m2|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Living area size{% endtrans %} (m<sup>2</sup>)</span>
                <span>{{ living_area_size_m2 }}</span>
              </p>
            </li>
          {% endif %}
          {% if floor|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Floor{% endtrans %}</span>
                <span>{{ floor }}</span>
              </p>
            </li>
          {% endif %}
          {% if sales_price|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Sales price{% endtrans %}</span>
                <span>{{ sales_price }}</span>
              </p>
            </li>
          {% endif %}
          {% if debt_free_sales_price|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Debt free sales price{% endtrans %}</span>
                <span>{{ debt_free_sales_price }}</span>
              </p>
            </li>
          {% endif %}
          {% if energy_class|render %}
            <li class="apartment__details-item">
              <p>
                <span>{% trans %}Energy class{% endtrans %}</span>
                <span>{{ energy_class }}</span>
              </p>
            </li>
          {% endif %}
        </ul>
      </div>
    </div>
  </div>
</article>
