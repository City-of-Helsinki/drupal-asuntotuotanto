/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/applicationFormActions.js":
/*!******************************************!*\
  !*** ./src/js/applicationFormActions.js ***!
  \******************************************/
/***/ (function() {

eval("(($, Drupal) => {\n  jQuery(document).ajaxStop(() => {\n    // Prevent race condition by keeping buttons disabled as long as necessary.\n    const button = $('.application-form-apartment__apartment-add-button');\n    const customApartmentSelect = $('[data-drupal-selector=\"custom_apartment_select\"]');\n\n    if (button && customApartmentSelect.length == 0) {\n      button.first().attr(\"disabled\", false);\n    } // Prevent add new button from staying disabled after ajax.\n\n\n    const el = $(\"[id^=apartment_list_select_]\");\n\n    if (el.length > 0 && el.is(':disabled')) {\n      el.prop('disabled', false);\n    }\n  });\n  const lang = drupalSettings.path.currentLanguage;\n  const translation = {\n    \"Delete\": {\n      \"fi\": \"Poista\",\n      \"en\": \"Delete\"\n    },\n    \"Open\": {\n      \"fi\": \"Katso huoneistoa\",\n      \"en\": \"Open apartment page\"\n    },\n    \"Apartment\": {\n      \"fi\": \"huoneisto\",\n      \"en\": \"apartment\"\n    },\n    \"Add\": {\n      \"fi\": \"Lis채채 uusi huoneisto\",\n      \"en\": \"Add an apartment to the list\"\n    },\n    \"Updated\": {\n      \"fi\": \"Huoneistojen j채rjestys on p채ivitetty\",\n      \"en\": \"Apartment list order has been updated.\"\n    }\n  };\n  const screenReaderInformationBoxElement = document.getElementsByClassName(\"sr-information-box\")[0];\n  const applicationFormApartmentListElement = document.getElementById(\"application_form_apartments_list\");\n\n  const getApplicationFormApartmentListElementCount = () => applicationFormApartmentListElement.getElementsByClassName(\"application-form__apartments-item\").length;\n\n  const getLastOriginalApartmentSelectElement = () => {\n    const originalApartmentSelectElement = document.querySelector('[data-drupal-selector=\"edit-apartment-0-id\"]');\n    const originalApartmentSelectElementWrapper = originalApartmentSelectElement.parentElement.parentElement.parentElement.parentElement.parentElement;\n    const selectCount = originalApartmentSelectElementWrapper.children.length;\n    const lastSelectParent = originalApartmentSelectElementWrapper.children[selectCount - 1];\n    return lastSelectParent.getElementsByTagName(\"select\")[0];\n  };\n\n  const getOriginalSelectElementValues = () => {\n    const selectElements = document.querySelectorAll('[data-drupal-selector=\"edit-apartment\"] > table select');\n    return [...selectElements].filter(select => select.getAttribute(\"data-drupal-selector\").includes(\"-id\")).map(select => select.value).filter(selectValue => selectValue !== \"0\");\n  };\n\n  const detectMutations = mutations => {\n    mutations.forEach(mutation => {\n      if (mutation.type === \"childList\") {\n        const listItem = document.getElementsByClassName(\"application-form__apartments-item\");\n        [...listItem].map(item => {\n          const actionButtonElements = item.querySelectorAll(\"button[data-list-position-action-button]\");\n          const index = [...item.parentElement.children].indexOf(item);\n\n          if (!item.classList.contains(\"application-form__apartments-item--with-select\")) {\n            if (index === 0 && !item.nextElementSibling.classList.contains(\"application-form__apartments-item--with-select\")) {\n              actionButtonElements[0].disabled = true;\n              actionButtonElements[1].disabled = false;\n            }\n\n            if (index > 0 && index < getApplicationFormApartmentListElementCount() - 1) {\n              if (item.nextElementSibling.classList.contains(\"application-form__apartments-item--with-select\")) {\n                actionButtonElements[0].disabled = false;\n                actionButtonElements[1].disabled = true;\n              } else {\n                actionButtonElements[0].disabled = false;\n                actionButtonElements[1].disabled = false;\n              }\n            }\n\n            if (index === getApplicationFormApartmentListElementCount() - 1) {\n              actionButtonElements[0].disabled = false;\n              actionButtonElements[1].disabled = true;\n            }\n          }\n        });\n      }\n    });\n  };\n\n  const applicationFormApartmentListObserver = new MutationObserver(detectMutations);\n  applicationFormApartmentListObserver.observe(applicationFormApartmentListElement, {\n    childList: true\n  });\n\n  const createParagraphElementWithVisuallyHiddenText = (classes, hiddenTextString, visibleString) => {\n    const p = document.createElement(\"p\");\n    p.classList.add(...classes);\n    const span1 = document.createElement(\"span\");\n    const span1Content = document.createTextNode(Drupal.t(hiddenTextString));\n    span1.classList.add(\"visually-hidden\");\n    span1.appendChild(span1Content);\n    const span2 = document.createElement(\"span\");\n    const span2Content = document.createTextNode(visibleString);\n    span2.appendChild(span2Content);\n    p.append(span1, span2);\n    return p;\n  };\n\n  const createButtonElement = (classes, content, disabled = false) => {\n    const button = document.createElement(\"button\");\n    button.classList.add(...classes);\n    const span = document.createElement(\"span\");\n    const text = document.createTextNode(Drupal.t(content));\n    span.append(text);\n    button.append(span);\n    button.setAttribute(\"type\", \"button\");\n    if (disabled) button.disabled = true;\n    return button;\n  };\n\n  const createListItemElementWithText = (description, value) => {\n    const liElement = document.createElement(\"li\");\n    const span1 = document.createElement(\"span\");\n    const text1 = document.createTextNode(Drupal.t(description));\n    span1.appendChild(text1);\n    const span2 = document.createElement(\"span\");\n    const text2 = document.createTextNode(Drupal.t(value));\n    span2.appendChild(text2);\n    liElement.append(span1, span2);\n    return liElement;\n  };\n\n  const setFocusToLastSelectElement = () => {\n    const allCustomSelectElements = document.querySelectorAll('[data-drupal-selector=\"custom_apartment_select\"]');\n    const customSelectCount = allCustomSelectElements.length;\n    const lastCustomSelect = allCustomSelectElements[customSelectCount - 1];\n    lastCustomSelect.focus();\n  };\n\n  const createCustomSelectElement = () => {\n    const apartmentListElementWrapper = document.createElement(\"div\");\n    apartmentListElementWrapper.classList.add(\"application-form-apartment__apartment-add-actions-wrapper\");\n    const selectCount = getApplicationFormApartmentListElementCount() - 1;\n    const selectElementId = `apartment_list_select_${selectCount}`;\n    const apartmentListElement = document.createElement(\"div\");\n    apartmentListElement.classList.add(\"hds-select-element\");\n    const apartmentSelectElementLabel = document.createElement(\"label\");\n    const apartmentSelectElementLabelText = document.createTextNode(translation[\"Apartment\"][lang]);\n    apartmentSelectElementLabel.appendChild(apartmentSelectElementLabelText);\n    apartmentSelectElementLabel.setAttribute(\"for\", selectElementId);\n    const apartmentSelectElementWrapper = document.createElement(\"div\");\n    apartmentSelectElementWrapper.classList.add(\"hds-select-element__select-wrapper\");\n    const selectedApartments = getOriginalSelectElementValues();\n    const apartmentSelectElement = getLastOriginalApartmentSelectElement().cloneNode(true); // eslint-disable-next-line array-callback-return\n\n    [...apartmentSelectElement.options].map((option, index) => {\n      if (index > 0) {\n        const originalTextSplitted = option.innerHTML.split(\" | \");\n        option.innerHTML = `${originalTextSplitted[0]} | ${originalTextSplitted[1]} | ${originalTextSplitted[3]}`;\n      }\n    });\n    apartmentSelectElement.classList.add(\"hds-select-element__select\");\n    apartmentSelectElement.setAttribute(\"id\", selectElementId);\n    apartmentSelectElement.setAttribute(\"data-id\", selectCount);\n    apartmentSelectElement.setAttribute(\"data-drupal-selector\", \"custom_apartment_select\");\n\n    if (apartmentSelectElement.id != \"apartment_list_select_0\" && $.active != 0) {\n      apartmentSelectElement.setAttribute(\"disabled\", true);\n    }\n\n    const earlierSelectedOptions = [...apartmentSelectElement.options].filter(option => selectedApartments.includes(option.value));\n    earlierSelectedOptions.forEach(option => {\n      apartmentSelectElement.removeChild(option);\n    });\n    apartmentSelectElement.addEventListener(\"change\", ({\n      target\n    }) => {\n      const originalSelectElementTarget = document.querySelector(`[data-drupal-selector=\"edit-apartment-${selectCount}-id\"]`);\n      const apartmentAddButton = document.getElementsByClassName(\"application-form-apartment__apartment-add-button\")[0];\n      const targetParent = target.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;\n      targetParent.setAttribute(\"data-id\", selectCount);\n      originalSelectElementTarget.value = target.value;\n      originalSelectElementTarget.dispatchEvent(new Event(\"change\"));\n      targetParent.classList.remove(\"application-form__apartments-item--with-select\");\n      const selectedValueTextArray = originalSelectElementTarget.options[originalSelectElementTarget.selectedIndex].text.split(\" | \");\n      const listItemValues = {\n        apartment_number: selectedValueTextArray[0],\n        apartment_structure: selectedValueTextArray[1],\n        apartment_floor: selectedValueTextArray[2],\n        apartment_living_area_size: selectedValueTextArray[3],\n        apartment_debt_free_sales_price: selectedValueTextArray[4],\n        apartment_sales_price: selectedValueTextArray[5]\n      }; // eslint-disable-next-line no-use-before-define\n\n      targetParent.innerHTML = createApartmentListItem(listItemValues, target.value).innerHTML;\n      const information = document.createElement(\"p\");\n      information.appendChild(document.createTextNode(Drupal.t(\"Apartment list has been updated.\")));\n      screenReaderInformationBoxElement.append(information);\n      const index = [...targetParent.parentElement.children].indexOf(targetParent);\n\n      if (index === 0) {\n        targetParent.querySelector(\"button\").disabled = true;\n      }\n\n      if (index === getApplicationFormApartmentListElementCount() - 1) {\n        targetParent.querySelector('button[data-list-position-action-button=\"lower\"]').disabled = true;\n      }\n\n      if (index > 0) {\n        targetParent.previousElementSibling.querySelector('button[data-list-position-action-button=\"lower\"]').disabled = false;\n      }\n\n      if (targetParent.nextElementSibling.classList.contains(\"application-form__apartments-item--with-select\")) {\n        targetParent.querySelector('button[data-list-position-action-button=\"lower\"]').disabled = true;\n      }\n\n      if (apartmentAddButton) {\n        if ($.active == 0) {//apartmentAddButton.removeAttribute(\"disabled\");\n        }\n\n        apartmentAddButton.focus();\n      }\n    });\n    apartmentSelectElementWrapper.appendChild(apartmentSelectElement);\n    apartmentListElement.append(apartmentSelectElementLabel, apartmentSelectElementWrapper);\n    apartmentListElementWrapper.appendChild(apartmentListElement);\n    return apartmentListElementWrapper;\n  };\n\n  const createElementWithClasses = (tag, classes = []) => {\n    const element = document.createElement(tag);\n    element.classList.add(...classes);\n    return element;\n  };\n\n  const swapOriginalSelectWeights = (select1Id, select2Id) => {\n    const select1WeigthElement = document.querySelector(`[name=\"apartment[${select1Id}][_weight]\"]`);\n    const select2WeigthElement = document.querySelector(`[name=\"apartment[${select2Id}][_weight]\"]`);\n    const select1Weigth = select1WeigthElement.value;\n    select1WeigthElement.value = select2WeigthElement.value;\n    select2WeigthElement.value = select1Weigth;\n  };\n\n  const handleListPositionRaiseClick = target => {\n    const parent = target.parentElement.parentElement.parentElement;\n    const sibling = parent.previousElementSibling;\n\n    if (sibling !== null) {\n      sibling.before(parent);\n      const apartment = findMatchingApartmentName(target);\n      const originalSelectElementTarget = findMatchingOriginalSelectElementByName(apartment); // After updating the new list, update the whole old list.\n\n      jQuery('#application_form_apartments_list').children('li').each((index, element) => {\n        const id = `#edit-apartment-${index}-weight`; // Find the number of the apartment.\n\n        const numberElement = jQuery(element).first().find('.application-form-apartment__apartment-number').first()[0];\n\n        if (numberElement != undefined) {\n          const number = $(numberElement).find('span').last()[0].textContent;\n          const originalSelectElements = getOriginalSelectedElements();\n          const originalDropdown = originalSelectElements.filter(function () {\n            return jQuery(this).find('option:selected').text().includes(number);\n          }); // Find data-drupal-selector attribute with value ending \"-weight\"\n\n          originalDropdown.first().closest('tr').find('[data-drupal-selector$=-weight]')[0].value = index;\n        }\n      });\n      originalSelectElementTarget.change();\n      setTimeout(() => {\n        if (target.disabled) {\n          target.nextElementSibling.focus();\n        } else {\n          target.focus();\n        }\n      }, 50);\n      const information = document.createElement(\"p\");\n      information.appendChild(document.createTextNode(translation[\"Updated\"][lang]));\n      screenReaderInformationBoxElement.append(information);\n    }\n  };\n\n  const handleListPositionLowerClick = target => {\n    const parent = target.parentElement.parentElement.parentElement;\n    const sibling = parent.nextElementSibling;\n\n    if (sibling !== null) {\n      if (!sibling.classList.contains(\"application-form__apartments-item--with-select\")) {\n        sibling.after(parent);\n        const apartment = findMatchingApartmentName(target);\n        const originalSelectElementTarget = findMatchingOriginalSelectElementByName(apartment); // After updating the new list, update the whole old list.\n\n        jQuery('#application_form_apartments_list').children('li').each((index, element) => {\n          const id = `#edit-apartment-${index}-weight`; // Find the number of the apartment.\n\n          const numberElement = jQuery(element).first().find('.application-form-apartment__apartment-number').first()[0];\n\n          if (numberElement != undefined) {\n            const number = $(numberElement).find('span').last()[0].textContent;\n            const originalSelectElements = getOriginalSelectedElements();\n            const originalDropdown = originalSelectElements.filter(function () {\n              return jQuery(this).find('option:selected').text().includes(number);\n            }); // Find data-drupal-selector attribute with value ending \"-weight\"\n\n            originalDropdown.first().closest('tr').find('[data-drupal-selector$=-weight]')[0].value = index;\n          }\n        });\n        originalSelectElementTarget.change();\n        setTimeout(() => {\n          if (target.disabled) {\n            target.previousElementSibling.focus();\n          } else {\n            target.focus();\n          }\n        }, 10);\n        const information = document.createElement(\"p\");\n        information.appendChild(document.createTextNode(Drupal.t(\"Apartment list order has been updated.\")));\n        screenReaderInformationBoxElement.append(information);\n      }\n    }\n  };\n\n  const handleApartmentDeleteButtonClick = target => {\n    jQuery('.application-form-apartment__apartment-delete-button').each((index, element) => {\n      jQuery(element).prop(\"disabled\", true);\n    });\n    const parentLiElement = target.parentElement.parentElement.parentElement;\n    const apartment = findMatchingApartmentName(target);\n    if (!apartment) return;\n    const originalDropdown = findMatchingOriginalSelectElementByName(apartment);\n    const removeButton = originalDropdown.closest('tr').find(':submit')[0];\n    originalDropdown.val(0);\n    originalDropdown.change();\n    parentLiElement.innerHTML = \"<div class='application-form-apartment-loader-wrapper'><div class='application-form-apartment-loader'></div></div>\";\n    setTimeout(() => {\n      jQuery(removeButton).trigger('mousedown');\n      parentLiElement.remove();\n      jQuery('.application-form-apartment__apartment-delete-button').each((index, element) => {\n        jQuery(element).prop(\"disabled\", false);\n      });\n    }, 750);\n  };\n\n  const handleListItemInnerClicks = ({\n    target\n  }) => {\n    if (target.getAttribute(\"data-list-position-action-button\") === \"raise\") {\n      handleListPositionRaiseClick(target);\n    }\n\n    if (target.getAttribute(\"data-list-position-action-button\") === \"lower\") {\n      handleListPositionLowerClick(target);\n    }\n\n    if (target.getAttribute(\"class\") === \"application-form-apartment__apartment-delete-button\") {\n      handleApartmentDeleteButtonClick(target);\n    }\n  };\n\n  const handleApartmentAddButtonClick = ({\n    target\n  }) => {\n    const ajaxButton = $('[data-drupal-selector=\"edit-apartment-add-more\"]');\n\n    if (getApplicationFormApartmentListElementCount() <= 1 && getLastOriginalApartmentSelectElement().value !== \"0\") {\n      ajaxButton.mousedown();\n    }\n\n    const formHeader = target.parentElement;\n    const parentLiElement = target.parentElement.parentElement.parentElement.parentElement;\n    parentLiElement.addEventListener(\"click\", handleListItemInnerClicks);\n    formHeader.appendChild(createCustomSelectElement());\n    target.remove();\n    setFocusToLastSelectElement();\n\n    if (getApplicationFormApartmentListElementCount() < 2) {\n      // eslint-disable-next-line no-use-before-define\n      appendListItemToApartmentList();\n    }\n  };\n\n  const createApartmentListItem = (values, id, withSelectElement = false) => {\n    let {\n      apartment_number: apartmentNumberValue,\n      apartment_structure: apartmentStructureValue,\n      apartment_floor: apartmentFloorValue,\n      apartment_living_area_size: apartmentLivingAreaSizeValue,\n      apartment_sales_price: apartmentSalesPriceValue,\n      apartment_debt_free_sales_price: apartmentDebtFreeSalesPriceValue\n    } = values;\n    const project_type_element = document.querySelectorAll(\"[data-drupal-selector='asu-application-haso-form']\");\n    const project_type = project_type_element.length > 0 ? \"HASO\" : \"hitas\";\n    const li = createElementWithClasses(\"li\", [\"application-form__apartments-item\"]);\n\n    if (withSelectElement) {\n      li.classList.add(\"application-form__apartments-item--with-select\");\n    }\n\n    const article = createElementWithClasses(\"article\", [\"application-form-apartment\"]);\n    const listPositionDesktop = createParagraphElementWithVisuallyHiddenText([\"application-form-apartment__list-position\", \"is-desktop\"], \"List position\", \"\");\n    const formHeader = createElementWithClasses(\"div\", [\"application-form-apartment__header\"]);\n    const listPositionMobile = createParagraphElementWithVisuallyHiddenText([\"application-form-apartment__list-position\", \"is-mobile\"], \"List position\", \"\");\n    const apartmentNumber = createParagraphElementWithVisuallyHiddenText([\"application-form-apartment__apartment-number\"], \"Apartment\", apartmentNumberValue);\n    const apartmentStructure = createParagraphElementWithVisuallyHiddenText([\"application-form-apartment__apartment-structure\"], \"Apartment structure\", apartmentStructureValue);\n    const apartmentAddButton = createButtonElement([\"application-form-apartment__apartment-add-button\"], translation[\"Add\"][lang]);\n    apartmentAddButton.addEventListener(\"click\", handleApartmentAddButtonClick);\n\n    if (getApplicationFormApartmentListElementCount() > 0) {\n      apartmentAddButton.setAttribute(\"disabled\", true);\n    }\n\n    if (withSelectElement) {\n      formHeader.append(listPositionMobile, apartmentAddButton);\n    } else {\n      formHeader.append(listPositionMobile, apartmentNumber, apartmentStructure);\n    }\n\n    const listPositionActions = document.createElement(\"div\");\n    listPositionActions.classList.add(\"application-form-apartment__list-position-actions\");\n    const listPositionActionsRaiseButton = createButtonElement(\"\", `Raise on the list, apartment ${apartmentNumberValue}`, withSelectElement && true);\n    listPositionActionsRaiseButton.setAttribute(\"data-list-position-action-button\", \"raise\");\n    const listPositionActionsLowerButton = createButtonElement(\"\", `Lower on the list, apartment ${apartmentNumberValue}`, withSelectElement && true);\n    listPositionActionsLowerButton.setAttribute(\"data-list-position-action-button\", \"lower\");\n    listPositionActions.append(listPositionActionsRaiseButton, listPositionActionsLowerButton);\n    const formApartmentInformation = createElementWithClasses(\"ul\", [\"application-form-apartment__information\"]);\n    const formApartmentInformationFloor = createListItemElementWithText(\"Floor\", apartmentFloorValue);\n    const formApartmentInformationLivingAreaSize = createListItemElementWithText(\"Living area size\", apartmentLivingAreaSizeValue);\n    let firstPriceTitle = \"\";\n    let secondPriceTitle = \"\";\n\n    if (project_type === \"HASO\") {\n      firstPriceTitle = Drupal.t(\"Right of occupancy payment\");\n      secondPriceTitle = '';\n      apartmentDebtFreeSalesPriceValue = '';\n    } else {\n      firstPriceTitle = Drupal.t(\"Sales price\");\n      secondPriceTitle = Drupal.t(\"Debt free sales price\");\n    }\n\n    const formApartmentInformationSalesPrice = createListItemElementWithText(firstPriceTitle, apartmentSalesPriceValue);\n    const formApartmentInformationDebtFreeSalesPrice = createListItemElementWithText(secondPriceTitle, apartmentDebtFreeSalesPriceValue);\n    formApartmentInformation.append(formApartmentInformationFloor, formApartmentInformationLivingAreaSize, formApartmentInformationSalesPrice, formApartmentInformationDebtFreeSalesPrice);\n    const formActions = createElementWithClasses(\"div\", [\"application-form-apartment__actions\"]);\n    const formActionsDeleteButton = createButtonElement([\"application-form-apartment__apartment-delete-button\"], translation['Delete'][lang]);\n    formActionsDeleteButton.setAttribute(\"aria-label\", `${translation['Delete'][lang]}, ${translation['Apartment'][lang]} ${apartmentNumberValue}`);\n    const formActionsLink = document.createElement(\"a\");\n    const formActionsLinkText = document.createTextNode(translation[\"Open\"][lang]);\n    formActionsLink.appendChild(formActionsLinkText);\n    formActionsLink.setAttribute(\"href\", `${window.location.origin}/node/${id}`);\n    formActionsLink.setAttribute(\"aria-label\", `${translation[\"Open\"][lang]}, ${translation[\"Apartment\"][lang]} ${apartmentNumberValue}`);\n    formActions.append(formActionsDeleteButton, formActionsLink);\n\n    if (withSelectElement) {\n      article.append(listPositionDesktop, formHeader, listPositionActions);\n    } else {\n      article.append(listPositionDesktop, formHeader, listPositionActions, formApartmentInformation, formActions);\n    }\n\n    li.appendChild(article);\n    return li;\n  };\n\n  const emptyTable = () => {\n    jQuery('#application_form_apartments_list').children().not(':last').remove();\n  };\n\n  const appendListItemToApartmentList = () => {\n    applicationFormApartmentListElement.append(createApartmentListItem({}, null, true));\n  };\n\n  const getOriginalSelectedElements = () => {\n    return $('[data-drupal-selector=\"edit-apartment\"] > table select');\n  };\n\n  const findMatchingApartmentName = target => {\n    return target.parentElement.parentElement.parentElement ? jQuery(target.parentElement.parentElement.parentElement).first().find('.application-form-apartment__apartment-number').first().find('span').last()[0].textContent : null;\n  };\n\n  const findMatchingOriginalSelectElementByName = apartment => {\n    const originalSelectElements = $('[data-drupal-selector=\"edit-apartment\"] > table select');\n    const originalSelect = originalSelectElements.filter(function () {\n      return jQuery(this).find('option:selected').text().includes(apartment);\n    });\n    return originalSelect.first();\n  };\n\n  const buildTable = () => {\n    if (getOriginalSelectElementValues().length > 0) {\n      const selectElements = document.querySelectorAll('[data-drupal-selector=\"edit-apartment\"] > table select');\n      const selectElementsArray = [...selectElements].filter(select => select.getAttribute(\"data-drupal-selector\").includes(\"-id\")).filter(select => select.value !== \"0\");\n      selectElementsArray.map(select => {\n        const selectedValueTextArray = select.options[select.selectedIndex].text.split(\" | \");\n        const listItemValues = {\n          apartment_number: selectedValueTextArray[0],\n          apartment_structure: selectedValueTextArray[1],\n          apartment_floor: selectedValueTextArray[2],\n          apartment_living_area_size: selectedValueTextArray[3],\n          apartment_debt_free_sales_price: selectedValueTextArray[4],\n          apartment_sales_price: selectedValueTextArray[5]\n        };\n        applicationFormApartmentListElement.append(createApartmentListItem(listItemValues, select.value, false));\n      });\n\n      if (getApplicationFormApartmentListElementCount() === 1) {\n        const listItem = document.getElementsByClassName(\"application-form__apartments-item\")[0];\n        const listItemActionButtons = listItem.querySelectorAll(\"[data-list-position-action-button]\");\n        [...listItemActionButtons].map(button => {\n          button.disabled = true;\n        });\n      }\n\n      if (getApplicationFormApartmentListElementCount() < 5) {\n        appendListItemToApartmentList();\n        const apartmentAddButton = document.getElementsByClassName(\"application-form-apartment__apartment-add-button\")[0];\n\n        if (apartmentAddButton) {\n          apartmentAddButton.removeAttribute(\"disabled\");\n        }\n      }\n    }\n\n    if (getApplicationFormApartmentListElementCount() === 0) {\n      appendListItemToApartmentList();\n    }\n\n    const alreadyExistingLiElements = document.getElementsByClassName(\"application-form__apartments-item\");\n\n    if (alreadyExistingLiElements.length > 0) {\n      [...alreadyExistingLiElements].map((item, index) => {\n        item.setAttribute(\"data-id\", index);\n        item.addEventListener(\"click\", handleListItemInnerClicks);\n      });\n    }\n  };\n\n  const rebuildTable = () => {\n    emptyTable();\n    buildTable();\n  };\n\n  window.onload = buildTable;\n})(jQuery, Drupal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/applicationFormActions.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/applicationFormActions.js"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=applicationFormActions.min.js.map