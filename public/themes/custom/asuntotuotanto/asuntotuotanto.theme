<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

use Drupal\Core\Url;
use Drupal\Core\Site\Settings;
use Drupal\file\Entity\File;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function asuntotuotanto_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('asuntotuotanto')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    if (!empty($icon_path)) {
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function asuntotuotanto_preprocess(&$variables) {
  $variables['asuntotuotanto_icons_path'] = asuntotuotanto_get_icons_path();
  $variables['#attached']['drupalSettings']['asuntotuotanto_icons_path'] = $variables['asuntotuotanto_icons_path'];
  $variables['current_user_id'] = \Drupal::currentUser()->id() ?? NULL;
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * {@inheritdoc}
 */
function asuntotuotanto_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $white_list = ['asu_application_haso_form', 'asu_application_hitas_form'];
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);

    if (in_array($variables['element']['#form_id'], $white_list)) {
      $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#form_id']);
    }
  }
}

/**
 * Implements hook_preprocess_html() for html templates.
 */
function asuntotuotanto_preprocess_html(array &$variables) {
  $variables['#attached']['drupalSettings']['matomo_base_url'] = Settings::get('matomo_base_url') ?: 'https://matomo.hel.fi/';
  $variables['#attached']['library'][] = 'asuntotuotanto/matomo';
  $path = \Drupal::service('path.current')->getPath();
  $path_parts = explode('/', $path);

  if (str_contains($path, 'asuntohaku') && isset($path_parts[2])) {
    $title = ucfirst("$path_parts[1] $path_parts[2]");

    if (isset($path_parts[3])) {
      $title .= " $path_parts[3]";
    }

    $variables['head_title']['title'] = "$title | Helsingin kaupunki";
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_page(array &$variables) : void {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Return early if route name is empty.
  if (!$route_name) {
    return;
  }
  // Removing the js library on user pages.
  // Return if route is not related to the user route.
  if (
    $route_name !== 'entity.user.canonical' &&
    !str_starts_with($route_name, 'asu_user')
  ) {
    return;
  }
  // If table of contents library is attached remove it from user routes.
  if (($key = array_search('helfi_toc/table_of_contents', $variables['#attached']['library'])) !== FALSE) {
    unset($variables['#attached']['library'][$key]);
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_menu(&$variables) {
  $menu_name = $variables['menu_name'];

  switch ($menu_name) {
    case 'main':
      $menu_block_configuration_suggestion = $variables['menu_block_configuration']['suggestion'];

      if ($menu_block_configuration_suggestion === 'main__mobile') {
        $login_link = [
          'title' => t('Log in'),
          'url' => Url::fromRoute('user.register'),
          'is_login_link' => TRUE,
        ];

        // Check if user is logged in.
        if (!\Drupal::currentUser()->isAuthenticated()) {
          $variables['items']['login_link'] = $login_link;
        }
      }

      if ($menu_block_configuration_suggestion === 'main__desktop') {
        $language = Drupal::languageManager()->getCurrentLanguage();
        $current_langcode = $language->getId();
        $items = $variables['items'];
        $current_path = "/$current_langcode" . \Drupal::service('path.current')->getPath() . "?lang=$current_langcode";

        foreach ($items as $key => $item) {
          $is_active = FALSE;
          $below = $item['below'];
          $url = $item['url'];

          if ($url->isExternal()) {
            $url_string = $url->toString() . "?lang=$current_langcode";
          }
          else {
            $url_string = "/$current_langcode/" . $url->getInternalPath() . "?lang=$current_langcode";
          }

          $variables['items'][$key]['is_active'] = $is_active;
          $variables['items'][$key]['url'] = $url;

          if ($current_path === $url_string) {
            $is_active = TRUE;
          }

          if ($below) {
            foreach ($below as $below_key => $below_item) {
              $is_below_item_active = FALSE;
              $below_url = $below_item['url'];

              if ($below_url->isExternal()) {
                $below_url_string = $below_url->toString() . "?lang=$current_langcode";
              }
              else {
                $below_url_string = "/$current_langcode/" . $below_url->getInternalPath() . "?lang=$current_langcode";
              }

              if ($current_path === $below_url_string) {
                $is_below_item_active = TRUE;
              }

              $variables['items'][$key]['below'][$below_key]['is_active'] = $is_below_item_active;

              if ($is_active || $is_below_item_active) {
                $variables['items'][$key]['attributes']->addClass('is-active');
              }

              $variables['items'][$key]['below'][$below_key]['url'] = $below_url;
            }
          }
        }
      }

      break;

    case 'user-tools-menu':
      $items = $variables['items']['asu_user_tools_menu.user_name']['below'];

      $variables['#cache']['contexts'][] = 'user';

      foreach ($items as $key => $item) {
        $url = $item['url']->toString();
        $current_path = Url::fromRoute('<current>')->toString();
        $is_active = $current_path === $url;
        $variables['items']['asu_user_tools_menu.user_name']['below'][$key]['is_link_active'] = $is_active;
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for taxonomies.
 *
 * {@inheritdoc}
 */
function asuntotuotanto_theme_suggestions_taxonomy_term_alter(&$suggestions, $vars, $hook) {
  $suggestions[] = 'taxonomy_term__' . $vars['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_views_view().
 *
 * {@inheritdoc}
 */
function asuntotuotanto_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  switch ($view_id) {
    case 'news':
      if ($view->getTitle()) {
        $variables['page_title'] = $view->getTitle();
      }

      break;

    case 'project_apartments_listing':
      $variables['apartments_count'] = $view->total_rows;

      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_views_view_table(&$variables) {
  if ($variables['view']->id() === 'project_apartments_listing') {

    $results = $variables['result'];
    /** @var \Drupal\views\ResultRow $result */

    if ($results) {
      $result = reset($results);
      /** @var \Drupal\asu_content\Entity\Project $project */
      $project = $result->_entity->getProject();
    }
    else {
      $results = [];
      $project = FALSE;
    }

    $price_title = $project->field_ownership_type->entity->name->value == 'HASO' ? t('Right of occupancy payment') : t('Debt-free sales price');
    $variables['header']['field_debt_free_sales_price']['content'] = $price_title;
    unset($variables['header']['field_release_payment']);

    foreach ($results as $key => $row) {
      /** @var \Drupal\asu_content\Entity\Apartment $entity */
      $apartment = $row->_entity;
      $variables['rows'][$key]['application_status'] = get_apartment_application_status('low');

      $reserved_or_sold = FALSE;
      if ($apartment->isSold() || $apartment->isReserved()) {
        $reserved_or_sold = $apartment->isReserved() ? t('Reserved') : t('Vacant');
        // Set application status to HIGH if apartment is reserved.
        $variables['rows'][$key]['application_status']['status'] = $apartment->isReserved() ? 'high' : 'low';
        // Sold apartment is not listed so this is not necessary.
        if ($apartment->isSold()) {
          $reserved_or_sold = t('Sold');
        }
      }
      elseif ($apartment->isFree() || !$apartment->isReserved()) {
        $reserved_or_sold = t('Available');
      }

      if (!$project) {
        continue;
      }

      $is_application_period_active = $project->isApplicationPeriod();
      $variables['rows'][$key]['is_application_period_active'] = $is_application_period_active;
      $variables['rows'][$key]['apartment_number'] = $apartment->field_apartment_number->value;
      $variables['rows'][$key]['reserved_or_sold'] = $reserved_or_sold;
      $variables['rows'][$key]['application_url'] = $project->getApplicationUrl($apartment->field_apartment_number->value);
      $variables['rows'][$key]['application_url_title'] = $apartment->getApplicationUrlTitle();
      $variables['rows'][$key]['is_free'] = $apartment->isFree();
    }

    usort($variables['rows'], function ($a, $b) {
      return strnatcasecmp($a['apartment_number'], $b['apartment_number']);
    });

  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function asuntotuotanto_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements hook_preprocess_links().
 */
function asuntotuotanto_preprocess_links__language_block(&$variables) {
  $links = $variables['links'];

  foreach ($links as $key => $link) {
    if ($key !== 'fi') {
      unset($variables['links'][$key]);
    }
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function asuntotuotanto_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

/**
 * Implements hook_form_alter().
 */
function asuntotuotanto_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'user-login-form') {
    $form['name']['#description'] = FALSE;
    $form['pass']['#description'] = FALSE;
  }

  if ($form['#id'] == 'user-pass') {
    unset($form['mail']);
  }

  if ($form['#id'] == 'user-register-form') {
    $form['account']['pass']['#description'] = FALSE;
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'register_form_submit_button';
  }

  if ($form['#id'] == 'user-form') {
    $form['account']['mail']['#description'] = FALSE;
    $form['account']['pass']['#description'] = FALSE;
  }

  if (
    $form['#id'] == 'asu-application-hitas-add-form'||
    $form['#id'] == 'asu-application-haso-add-form' ||
    $form['#id'] == 'asu-application-hitas-form'||
    $form['#id'] == 'asu-application-haso-form'
  ) {
    $project_id = $form['#project_id'];
    $application_teaser_values = get_project_apartment_teaser_values($project_id);
    $form['application_project_information'] = $application_teaser_values;

    if (isset($application_teaser_values['#teaser_values']['application_end_time'])) {
      $date_formatter = \Drupal::service('date.formatter');
      $dateTime = $date_formatter->format(
        strtotime($application_teaser_values['#teaser_values']['application_end_time'] . ' UTC'),
        'custom',
        'd.m.Y H:i',
        'Europe/Helsinki',
      );
      $form['application_project_information']['#teaser_values']['application_end_time'] = $dateTime;
    }
  }

  if ($form['#id'] == 'views-exposed-form-faq-faq-page-hitas') {
    $form['actions']['reset']['#attributes']['data-twig-suggestion'] = 'faq_form_reset_button';
  }

  if ($form['#id'] == 'views-exposed-form-faq-faq-page-haso') {
    $form['actions']['reset']['#attributes']['data-twig-suggestion'] = 'faq_form_reset_button';
  }

}

/**
 * Implements hook_preprocess_node().
 */
function asuntotuotanto_preprocess_node(&$variables) {
  $date_formatter = \Drupal::service('date.formatter');
  $node = $variables['node'];
  $bundle = $node->getType();

  if ($node->field_content && !empty($node->field_content->getValue())) {
    foreach ($node->field_content->getValue() as $value) {
      $paragraph = FALSE;

      if (!empty($value['entity'])) {
        $paragraph = $value['entity'];
      }
      elseif (!empty($value['target_id'])) {
        $paragraph = Paragraph::load($value['target_id']);
      }

      if (!empty($paragraph) && $paragraph instanceof Paragraph) {
        if ($paragraph->getType() === "text") {
          $text = strip_tags($paragraph->get('field_text')->value);
          $text = str_replace(["\r", "\n"], ' ', $text);

          if (strlen($text) > 80) {
            if ($variables['view_mode'] === 'teaser_prominent') {
              if (strlen($text) > 230) {
                $text = rtrim(substr($text, 0, 230)) . "...";
              }
            }
            else {
              $text = rtrim(substr($text, 0, 80)) . "...";
            }
          }

          $variables['summary'] = $text;
          break;
        }
      }
    }
  }

  switch ($bundle) {
    case 'project':
      $apartment_structures = [];
      $apartment_living_area_sizes = [];
      $apartment_sales_prices = [];
      $apartment_debt_free_sales_prices = [];
      $prices = [];
      $adjusteds = [];
      $alterations = [];

      /** @var \Drupal\asu_content\Entity\Project $project */
      $project = $node;
      $project_type = $project->field_ownership_type->entity->name->value;

      if (
        $project->hasField('field_salesperson') &&
        !$project->get('field_salesperson')?->isEmpty()
      ) {
        $salesperson = $project->get('field_salesperson')
          ?->first()
          ?->get('entity')
          ?->getTarget();
        $variables['sales_phone'] = $salesperson?->get('field_phone_number')->value;
        $variables['sales_email'] = $salesperson?->get('mail')->value;
        $variables['sales_name'] = $salesperson?->get('field_full_name')->value;
      }

      $apartments = $project->getApartmentEntities();
      foreach ($apartments as $apartment) {

        $apartment_sales_price = $apartment->hasField('field_sales_price') ? $apartment->get('field_sales_price')->value : 0;
        $apartment_debt_free_sales_price = $apartment->hasField('field_debt_free_sales_price') ? $apartment->get('field_debt_free_sales_price')->value : 0;
        $apartment_living_area_size = $apartment->hasField('field_living_area') ? $apartment->get('field_living_area')->value : 0;
        $apartment_structure = $apartment->hasField('field_apartment_structure') ? $apartment->get('field_apartment_structure')->value : 0;

        if ($project_type == 'HASO') {
          $price = $apartment->hasField('field_right_of_occupancy_payment') ? $apartment->field_right_of_occupancy_payment->value : 0;
          array_push($prices, $price);
          $adjusted = $apartment->hasField('field_index_adjusted_right_of_oc') ? $apartment->field_index_adjusted_right_of_oc->value : 0;
          array_push($adjusteds, $adjusted);
          $alteration = $apartment->hasField('field_alteration_work') ? $apartment->field_alteration_work->value : 0;
          array_push($alterations, $alteration);
        }
        array_push($apartment_sales_prices, $apartment_sales_price);
        array_push($apartment_debt_free_sales_prices, $apartment_debt_free_sales_price);
        array_push($apartment_living_area_sizes, $apartment_living_area_size);
        array_push($apartment_structures, $apartment_structure);
      }

      $apartment_debt_free_sales_prices_string = '';
      $apartment_sales_prices_string = '';
      $prices_string = '';

      if (isset($apartment_structures)) {
        sort($apartment_structures);
      }

      if (array_filter($apartment_debt_free_sales_prices)) {
        $apartment_debt_free_sales_prices = array_filter($apartment_debt_free_sales_prices);
        $apartment_debt_free_sales_prices_minmax = [
          "min" => number_format(min($apartment_debt_free_sales_prices), 2, ',', ' '),
          "max" => number_format(max($apartment_debt_free_sales_prices), 2, ',', ' '),
        ];
        $apartment_debt_free_sales_prices_string = $apartment_debt_free_sales_prices_minmax['min'] . " € - " . $apartment_debt_free_sales_prices_minmax['max'] . " €";
      }

      if (array_filter($apartment_sales_prices)) {
        $apartment_sales_prices = array_filter($apartment_sales_prices);
        $apartment_sales_prices_minmax = [
          "min" => number_format(min($apartment_sales_prices), 2, ',', ' '),
          "max" => number_format(max($apartment_sales_prices), 2, ',', ' '),
        ];
        $apartment_sales_prices_string = $apartment_sales_prices_minmax['min'] . " € - " . $apartment_sales_prices_minmax['max'] . " €";
      }

      if (array_filter($apartment_living_area_sizes)) {
        $apartment_living_area_sizes = array_filter($apartment_living_area_sizes);
        $apartment_living_area_sizes_minmax = [
          "min" => number_format(min($apartment_living_area_sizes), 1, ',', NULL),
          "max" => number_format(max($apartment_living_area_sizes), 1, ',', NULL),
        ];
        $apartment_living_area_sizes_string = $apartment_living_area_sizes_minmax['min'] . " - " . $apartment_living_area_sizes_minmax['max'];
      }

      if (array_filter($prices)) {
        $prices = array_filter($prices);
        $prices_minmax = [
          "min" => number_format(min($prices), 2, ',', NULL),
          "max" => number_format(max($prices), 2, ',', NULL),
        ];
        $prices_string = $prices_minmax['min'] . " - " . $prices_minmax['max'];
      }

      $services = $project->get('field_services')->getValue();
      $services_stack = [];

      if (count($services) > 0) {
        foreach ($services as $key => $service) {
          $term_id = $service['term_id'];

          if ($term_id !== '0') {
            $service_name = Term::load($term_id)->name->value;
            $service_distance = $service['distance'];

            $services_stack[] = [
              'name' => $service_name,
              'distance' => $service_distance,
            ];
          }
        }
      }

      $project_attachments = $project->get('field_project_attachments')->getValue();
      $attachments_stack = [];

      if (count($project_attachments) > 0) {
        foreach ($project_attachments as $key => $attachment) {
          $target_id = $attachment['target_id'];
          $file = File::load($target_id);
          $description = $attachment['description'];
          $file_name = $file->getFilename();
          $file_size = format_size($file->getSize());
          $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());

          $attachments_stack[$key] = [
            'description' => $description,
            'name' => $file_name,
            'size' => $file_size,
            'uri' => $file_uri,
          ];
        }
      }

      $estimated_completion_date = NULL;
      if ($project->get('field_estimated_completion_date')->value) {
        $estimated_completion_date = (new DateTime($node->get('field_estimated_completion_date')->value))->format('m/Y');
      }

      $is_application_period_active = $project->isApplicationPeriod();
      $application_start = NULL;
      $application_end = NULL;

      if ($project->hasField('field_application_start_time') &&
        $project->get('field_application_start_time')->value
      ) {
        $application_start = $date_formatter->format(
            $node->get('field_application_start_time')->date->getTimestamp(),
            'custom',
            'd.m.Y H:i'
          );
      }
      if ($project->hasField('field_application_end_time') &&
        $project->get('field_application_end_time')->value
      ) {
        $application_end = $date_formatter->format(
          $node->get('field_application_end_time')->date->getTimestamp(),
          'custom',
          'd.m.Y H:i'
        );
      }

      if (!empty($node->field_street_address->value)) {
        $street_address_splitted = split_address_line($node->field_street_address->value);

        $street_name = $street_address_splitted['street'];
        $street_number_addition = $street_address_splitted['number_addition'];

        if (!empty($street_number_addition)) {
          $street_number_addition = $street_number_addition[0] === '-' ? $street_number_addition : "-$street_number_addition";
        }

        $street_number = $street_address_splitted['number'] . $street_number_addition ?? NULL;
        $variables['street_name'] = $street_name ?? NULL;
        $variables['street_number'] = $street_number ?? NULL;
      }

      $variables['application_url'] = $project->getApplicationUrl();
      $variables['application_start_time'] = $application_start;
      $variables['application_end_time'] = $application_end;

      $variables['apartments_count'] = count($apartments) < 2 ? 0 : count($apartments);
      $variables['apartment_sales_prices'] = $apartment_sales_prices_string;
      $variables['apartment_debt_free_sales_prices'] = $apartment_debt_free_sales_prices_string;
      $variables['apartment_structures'] = implode(", ", array_unique($apartment_structures));
      $variables['apartment_living_area_sizes_m2'] = $apartment_living_area_sizes_string ?? '';
      $variables['attachments'] = $attachments_stack ?? NULL;
      $variables['services'] = $services_stack ?? NULL;
      $variables['estimated_completion_date'] = $estimated_completion_date;
      $variables['is_application_period_active'] = $is_application_period_active;
      $variables['project_type'] = $project_type;
      $variables['apartment_prices'] = $prices_string;
      break;

    case 'apartment':
      /** @var \Drupal\asu_content\Entity\Apartment $apartment */
      $apartment = $node;
      if (count($apartment->get('field_images')->getValue()) > 0) {
        $cta_image_file_target_id = $apartment->get('field_images')->getValue()[0]['target_id'];
        $variables['cta_image'] = load_responsive_image_style($cta_image_file_target_id, 'image__3_2');
      }

      /** @var \Drupal\asu_content\Entity\Project $project */
      $project = $apartment->getProject();

      if ($project) {

        if (
          $project->hasField('field_salesperson') &&
          !$project->get('field_salesperson')?->isEmpty()
        ) {
          $salesperson = $project->get('field_salesperson')
            ?->first()
            ?->get('entity')
            ?->getTarget();
          $variables['sales_phone'] = $salesperson?->get('field_phone_number')->value;
          $variables['sales_email'] = $salesperson?->get('mail')->value;
          $variables['sales_name'] = $salesperson?->get('field_full_name')->value;
        }

        $is_application_period_active = $project->isApplicationPeriod();
        $is_application_period_in_the_past = $project->isApplicationPeriod('after');
        $application_start = NULL;
        $application_end = NULL;

        if (
          $project->hasField('field_application_start_time') &&
          $project->get('field_application_start_time'
          )->value) {
          $application_start = $date_formatter->format(
            $project->get('field_application_start_time')->date->getTimestamp(),
            'custom',
            'd.m.Y H:i'
          );
        }
        if ($project->hasField('field_application_end_time') &&
          $project->get('field_application_end_time'
          )->value) {
          $application_end = $date_formatter->format(
            $project->get('field_application_end_time')->date->getTimestamp(),
            'custom',
            'd.m.Y H:i'
          );
        }

        if (count($project->get('field_district')->getValue()) > 0) {
          $district = Term::load($project->get('field_district')->getValue()[0]['target_id'])->name->value ?? NULL;
        }

        if (count($project->get('field_ownership_type')->getValue()) > 0) {
          $ownership_type = Term::load($project->get('field_ownership_type')->getValue()[0]['target_id'])->name->value ?? NULL;
        }

        $project_description = $project->get('field_project_description')->value;
        $project_area_description = $project->get('field_project_area_description')->value;

        if (count($project->get('field_building_type')->getValue()) > 0) {
          $building_type = Term::load($project->get('field_building_type')->getValue()[0]['target_id'])->name->value ?? NULL;
        }

        if (count($project->get('field_energy_class')->getValue()) > 0) {
          $energy_class = Term::load($project->get('field_energy_class')->getValue()[0]['target_id'])->name->value ?? NULL;
        }

        $accessibility = $project->get('field_project_accessibility')->value;
        $services = $project->get('field_services')->getValue();
        $services_url = $project->get('field_services_url')->getValue()[0] ?? NULL;
        $services_stack = [];
        $project_attachments = $project->get('field_project_attachments')->getValue();
        $apartment_attachments = $apartment->get('field_apartment_attachments')->getValue();
        $attachments_stack = [];
        $estimated_completion_date = NULL;
        if ($project->get('field_estimated_completion_date')->value) {
          $estimated_completion_date = (new DateTime($project->get('field_estimated_completion_date')->value))->format('d.m.Y H:i:s');
        }

        if (count($project->get('field_site_owner')->getValue()) > 0) {
          $site_owner = Term::load($project->get('field_site_owner')->getValue()[0]['target_id'])->name->value ?? NULL;
        }

        $site_renter = $project->get('field_site_renter')->value;

        if (count($services) > 0) {
          foreach ($services as $key => $service) {
            $term_id = $service['term_id'];

            if ($term_id !== '0') {
              $service_name = Term::load($term_id)->name->value;
              $service_distance = $service['distance'];

              $services_stack[] = [
                'name' => $service_name,
                'distance' => $service_distance,
              ];
            }
          }
        }

        if (count($apartment_attachments) > 0) {
          foreach ($apartment_attachments as $key => $attachment) {
            $target_id = $attachment['target_id'];
            $file = File::load($target_id);

            if ($file) {
              $description = $attachment['description'];
              $file_name = $file->getFilename();
              $file_size = format_size($file->getSize());
              $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());

              array_push($attachments_stack, [
                'description' => $description,
                'name' => $file_name,
                'size' => $file_size,
                'uri' => $file_uri,
              ]);
            }
          }
        }

        if (count($project_attachments) > 0) {
          foreach ($project_attachments as $key => $attachment) {
            $target_id = $attachment['target_id'];
            $file = File::load($target_id);

            if ($file) {
              $description = $attachment['description'];
              $file_name = $file->getFilename();
              $file_size = format_size($file->getSize());
              $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());

              array_push($attachments_stack, [
                'description' => $description,
                'name' => $file_name,
                'size' => $file_size,
                'uri' => $file_uri,
              ]);
            }
          }
        }

        $street_address = $project->get('field_street_address')->value ?? NULL;
        $postal_code = $project->get('field_postal_code')->value ?? NULL;
        $city = $project->get('field_city')->value ?? NULL;
        $coordinate_lat = $project->get('field_coordinate_lat')->value ?? NULL;
        $coordinate_lon = $project->get('field_coordinate_lon')->value ?? NULL;

        if (!empty($street_address)) {
          $street_address_splitted = split_address_line($street_address);

          $street_name = $street_address_splitted['street'];
          $street_number_addition = $street_address_splitted['number_addition'];

          if (!empty($street_number_addition)) {
            $street_number_addition = $street_number_addition[0] === '-' ? $street_number_addition : "-$street_number_addition";
          }

          $street_number = $street_address_splitted['number'] . $street_number_addition ?? NULL;

          $variables['street_name'] = $street_name ?? NULL;
          $variables['street_number'] = $street_number ?? NULL;
        }

        $variables['application_url'] = $project->getApplicationUrl();
        $variables['coordinate_lat'] = $coordinate_lat;
        $variables['coordinate_lon'] = $coordinate_lon;
        $variables['city'] = $city;
        $variables['application_start_time'] = $application_start;
        $variables['application_end_time'] = $application_end;
        $variables['is_application_period_active'] = $is_application_period_active;
        $variables['is_application_period_in_the_past'] = $is_application_period_in_the_past;
        $variables['district'] = $district ?? NULL;
        $variables['address'] = "$street_address, $postal_code $city" ?? NULL;
        $variables['ownership_type'] = $ownership_type ?? NULL;
        $variables['accessibility'] = $accessibility ?? NULL;
        $variables['project_description'] = $project_description ?? NULL;
        $variables['project_area_description'] = $project_area_description ?? NULL;
        $variables['building_type'] = $building_type ?? NULL;
        $variables['energy_class'] = $energy_class ?? NULL;
        $variables['services'] = $services_stack ?? NULL;
        $variables['services_url'] = $services_url ?? NULL;
        $variables['attachments'] = $attachments_stack ?? NULL;
        $variables['estimated_completion_date'] = $estimated_completion_date;
        $variables['site_owner'] = $site_owner ?? NULL;
        $variables['site_renter'] = $site_renter ?? NULL;
        $variables['field_alteration_work'] = $apartment->get('field_alteration_work')->getValue()[0]['value'] ?? NULL;
        $variables['field_water_fee'] = $apartment->get('field_water_fee')->getValue()[0]['value'] ?? NULL;
        $variables['field_water_fee_explanation'] = $apartment->get('field_water_fee_explanation')->getValue()[0]['value'] ?? NULL;
        $variables['field_parking_fee'] = $apartment->get('field_parking_fee')->getValue()[0]['value'] ?? NULL;
        $variables['field_parking_fee_explanation'] = $apartment->get('field_parking_fee_explanation')->getValue()[0]['value'] ?? NULL;
        $variables['field_other_fees'] = $apartment->get('field_other_fees')->getValue()[0]['value'] ?? NULL;
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_pager(&$variables) {
  // Cast current to be INT instead of FLOAT.
  $variables['current'] = isset($variables['current']) ? (int) $variables['current'] : 1;

  // Check for last pager item href link.
  if (!empty($variables['items']['last']['href'])) {
    $splittedLink = explode("page=", $variables['items']['last']['href'])[1];
    $variables['pager_total_amount'] = (int) $splittedLink + 1;
  }
  else {
    if (!empty($variables['items']['pages'])) {
      $lastArrayItem = end($variables['items']['pages'])['href'];
      $splittedLink = explode("page=", $lastArrayItem)[1];
      $variables['pager_total_amount'] = (int) $splittedLink + 1;
    }
  }
}

/**
 * Implements template_preprocess_user().
 */
function asuntotuotanto_preprocess_user(&$variables) {
  $account = User::load(\Drupal::currentUser()->id());

  if ($account->bundle() == 'customer') {
    $fields = \Drupal::config('asu_user.external_user_fields')
      ->get('external_data_map');
    $store = \Drupal::service('tempstore.private')
      ->get('customer');
    foreach ($fields as $field_name => $field) {
      $variables['content'][$field_name] = $store->get($field_name);
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function asuntotuotanto_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  if ($paragraph_type == 'showcase_block') {
    if ($paragraph->hasField('field_showcases')) {
      $variables['showcases_count'] = count($paragraph->get('field_showcases')->getValue());
    }
  }

  if ($paragraph_type == 'contact_information_with_map') {
    $address_object = $paragraph->get('field_address')->getValue()[0];
    $address_line1 = $address_object['address_line1'];
    $address_split = split_address_line($address_line1);

    $street_name = $address_split['street'];
    $street_number_addition = $address_split['number_addition'];

    if (!empty($street_number_addition)) {
      $street_number_addition = $street_number_addition[0] === '-' ? $street_number_addition : "-$street_number_addition";
    }

    $street_number = $address_split['number'] . $street_number_addition ?? NULL;

    $variables['street_name'] = $street_name ?? NULL;
    $variables['street_number'] = $street_number ?? NULL;
  }
}

/**
 * Custom split_address_line().
 */
function split_address_line($address_line) {
  $match = [];
  $pattern = '#^((?:[^\d\n]*)*)(\d{1,5})\s?([\w[:punct:]\-/]*)$#';
  preg_match($pattern, $address_line, $match);
  $street = $match[1] ?? $address_line;
  $number = $match[2] ?? '';
  $numberAddition = $match[3] ?? '';

  return ['street' => $street, 'number' => $number, 'number_addition' => $numberAddition];
}

/**
 * Custom function format_date_to_unix_timestamp().
 */
function format_date_to_unix_timestamp($string) {
  $value = $string;
  $date = new DateTime($value);
  $timestamp = $date->format('U');

  return $timestamp;
}

/**
 * Custom get_apartment_application_status().
 */
function get_apartment_application_status($application_status) {
  $application_status_mapping = [
    "none" => t('Few applicants'),
    "low" => t('Few applicants'),
    "medium" => t('A little applicants'),
    "high" => t('A lot of applicants'),
  ];

  return [
    "status" => strtolower($application_status),
    "label" => $application_status_mapping[strtolower($application_status)],
  ];
}

/**
 * Custom function format_timestamp_to_custom_format().
 */
function format_timestamp_to_custom_format($timestamp, $format = 'short') {
  return \Drupal::service('date.formatter')->format($timestamp, $format);
}

/**
 * Custom load_responsive_image_style().
 */
function load_responsive_image_style($image_file_target_id, $responsive_image_style_id) {
  if (!$image_file_target_id && !$responsive_image_style_id) {
    return NULL;
  }

  $file = File::load($image_file_target_id);

  if (!$file) {
    return NULL;
  }

  $file_uri = $file->getFileUri();
  $image = \Drupal::service('image.factory')->get($file_uri);

  if ($image->isValid()) {
    $image_height = $image->getHeight();
    $image_width = $image->getWidth();
  }
  else {
    $image_height = NULL;
    $image_width = NULL;
  }

  $image_build = [
    '#theme' => 'responsive_image',
    '#width' => $image_width,
    '#height' => $image_height,
    '#responsive_image_style_id' => $responsive_image_style_id,
    '#uri' => $file_uri,
  ];

  $renderer = \Drupal::service('renderer');
  $renderer->addCacheableDependency($image_build, $file);

  return $image_build;
}

/**
 * Get project teaser values.
 *
 * @param int $project_id
 *   Project id.
 *
 * @return array[]
 *   Project teaser values.
 */
function get_project_apartment_teaser_values($project_id) {
  $projects = \Drupal::entityTypeManager()
    ->getListBuilder('node')
    ->getStorage()
    ->loadByProperties([
      'type' => 'project',
      'status' => 1,
      'nid' => $project_id,
    ]
    );

  $project = reset($projects);

  $fields = [
    'project_name' => 'field_housing_company',
    'project_estimated_completion' => 'field_estimated_completion',
    'application_end_time' => 'field_application_end_time',
  ];

  $values = [];

  $values['project_ownership_type'] = $project->field_ownership_type->entity ? $project->field_ownership_type->entity->name->value : '';
  $values['project_district'] = $project->field_district->entity ? $project->field_district->entity->name->value : '';
  $values['project_main_image_url'] = isset($project->field_main_image[0]) ? \Drupal::service('file_url_generator')->generateAbsoluteString($project->field_main_image[0]->entity->getFileUri()) : '';

  foreach ($fields as $key => $field) {
    if ($project && $project->hasField($field)) {
      $values[$key] = $project->get($field)->value ?? '';
    }
    else {
      $values[$key] = '';
    }
  }

  return [
    '#teaser_values' => $values,
  ];

}

/**
 * Add fullscreen functionality to slick.
 */
function asuntotuotanto_preprocess_blazy(&$variables) {
  // dd($variables);
  $variables['image']['#attributes']['data-image'] = \Drupal::service('file_url_generator')->generateAbsoluteString($variables['image']['#uri']);
  $variables['#attached']['library'][] = 'asuntotuotanto/intense-images';
}

/**
 * Implements template_theme_suggestions_file_link_alter().
 */
function asuntotuotanto_theme_suggestions_file_link_alter(&$suggestions, $vars, $hook) {
  // Get the node type.
  $node = \Drupal::routeMatch()->getParameter('node');
  $type = $node->getType();
  // Create the theme hook suggestion.
  $suggestions[] = 'file_link__type_' . $type;
}

/**
 * Implements template_preprocess_file_link().
 */
function asuntotuotanto_preprocess_file_link(&$variables) {
  // File type.
  $file = $variables['file'];
  $mime_type = $file->getMimeType();
  $variables['mime_type'] = file_icon_class($mime_type);
  // File url.
  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator */
  $file_url_generator = \Drupal::service('file_url_generator');
  $url = $file_url_generator
    ->generate(
      $file->getFileUri()
    );
  $variables['file_link'] = $url;
  // Use the description as the file name if available.
  if (empty($variables['description'])) {
    $variables['file_name'] = $file->getFilename();
  }
  else {
    $variables['file_name'] = $variables['description'];
  }
}
