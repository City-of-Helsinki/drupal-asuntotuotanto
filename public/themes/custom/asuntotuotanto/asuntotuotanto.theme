<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\asu_application\Applications;
use Drupal\asu_api\Api\ElasticSearchApi\Request\ProjectApartmentsRequest;

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function asuntotuotanto_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('asuntotuotanto')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    if (!empty($icon_path)) {
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function asuntotuotanto_preprocess(&$variables) {
  $variables['asuntotuotanto_icons_path'] = asuntotuotanto_get_icons_path();
  $variables['#attached']['drupalSettings']['asuntotuotanto_icons_path'] = $variables['asuntotuotanto_icons_path'];
  $variables['current_user_id'] = \Drupal::currentUser()->id() ?? NULL;
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * {@inheritdoc}
 */
function asuntotuotanto_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_preprocess_external_entity().
 */
function asuntotuotanto_preprocess_external_entity(&$variables) {
  $entity = $variables['entity'];
  $entity_type = $entity['#entity_type'];

  switch ($entity_type) {
    case 'project':
      $is_application_period_active = FALSE;
      $application_start_time = $entity['field_application_start_time'][0]['#context']['value'];
      $application_end_time = $entity['field_application_end_time'][0]['#context']['value'];
      $current_timestamp = time();

      $application_start_time = explode('-', $application_start_time);
      $application_end_time = explode('-', $application_end_time);

      $application_start_time_timestamp = format_date_to_unix_timestamp("$application_start_time[0] $application_start_time[1]");
      $application_end_time_timestamp = format_date_to_unix_timestamp("$application_end_time[0] $application_end_time[1]");

      if ($current_timestamp >= $application_start_time_timestamp && $current_timestamp <= $application_end_time_timestamp) {
        $is_application_period_active = TRUE;
      }

      if ($apartments = $entity['field_apartments']) {
        $apartments = isset($apartments['#items']) ? $apartments['#items']->getValue() : NULL;
        $apartments_stack = [];

        try {
          $project_id = $entity['#project']->id();
          $applications = Applications::create()
            ->getApartmentApplicationStatuses($project_id);
        }
        catch (\Exception $e) {
          $variables['applications'] = [];
        }

        foreach ($apartments as $apartment) {
          $apartment = $apartment['value'];
          $apartment['debt_free_sales_price'] = number_format($apartment['debt_free_sales_price'], 2, ',', '.');
          $apartment['sales_price'] = number_format($apartment['sales_price'], 2, ',', '.');
          $apartment['living_area_size'] = number_format($apartment['living_area_size'], 1, ',', '');
          $apartment_id = $apartment['id'];
          $application_status = $applications[$apartment_id] ?? 'NONE';
          $apartment['applications'] = get_apartment_application_status($application_status);
          $apartment['is_application_period_active'] = $is_application_period_active;

          $apartments_stack[] = $apartment;
        }
      }

      $variables['apartments'] = $apartments_stack ?? NULL;

      if ($services = $entity['field_services']) {
        $services = isset($services['#items']) ? $services['#items']->getValue() : NULL;
        $services_stack = [];

        foreach ($services as $service) {
          $service_name = $service['value']['name'];
          $service_distance = $service['value']['distance'];

          $services_stack[] = [
            'name' => $service_name,
            'distance' => $service_distance,
          ];
        }

        $variables['services'] = $services_stack ?? NULL;
      }

      if ($attachments = $entity['field_attachments']) {
        $attachments = isset($attachments['#items']) ? $attachments['#items']->getValue() : NULL;
        $attachments_stack = [];

        foreach ($attachments as $attachment) {
          $description = $attachment['value']['description'];
          $file_name = $attachment['value']['name'];
          $file_size = $attachment['value']['size'];
          $file_uri = $attachment['value']['uri'];

          $attachments_stack[] = [
            'description' => $description,
            'name' => $file_name,
            'size' => $file_size,
            'uri' => $file_uri,
          ];
        }

        $variables['attachments'] = $attachments_stack ?? NULL;
      }

      if ($services_url = $entity['field_services_url']) {
        $services_url = isset($services_url['#items']) ? $services_url['#items']->getValue()[0]['value'] : NULL;
        $variables['services_url'] = $services_url ?? NULL;
      }
      break;

    case 'apartment':
      $living_area_size = $entity['field_living_area']['#items']->getValue()[0]['value'];
      $sales_price = $entity['field_sales_price']['#items']->getValue()[0]['value'];
      $debt_free_sales_price = $entity['field_debt_free_sales_price']['#items']->getValue()[0]['value'];

      $variables['living_area_size_m2'] = number_format($living_area_size, 1, ',', '') ?? NULL;
      $variables['debt_free_sales_price'] = number_format($debt_free_sales_price, 2, ',', '.') ?? NULL;
      $variables['sales_price'] = number_format($sales_price, 2, ',', '.') ?? NULL;

      if ($services = $entity['field_services']) {
        $services = isset($services['#items']) ? $services['#items']->getValue() : NULL;
        $services_stack = [];

        foreach ($services as $service) {
          $service_name = $service['value']['name'];
          $service_distance = $service['value']['distance'];

          $services_stack[] = [
            'name' => $service_name,
            'distance' => $service_distance,
          ];
        }

        $variables['services'] = $services_stack ?? NULL;
      }

      if ($attachments = $entity['field_attachments']) {
        $attachments = isset($attachments['#items']) ? $attachments['#items']->getValue() : NULL;
        $attachments_stack = [];

        foreach ($attachments as $attachment) {
          $description = $attachment['value']['description'];
          $file_name = $attachment['value']['name'];
          $file_size = $attachment['value']['size'];
          $file_uri = $attachment['value']['uri'];

          $attachments_stack[] = [
            'description' => $description,
            'name' => $file_name,
            'size' => $file_size,
            'uri' => $file_uri,
          ];
        }

        $variables['attachments'] = $attachments_stack ?? NULL;
      }

      if ($services_url = $entity['field_services_url']) {
        $services_url = isset($services_url['#items']) ? $services_url['#items']->getValue()[0]['value'] : NULL;
        $variables['services_url'] = $services_url;
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_menu(&$variables) {
  $menu_name = $variables['menu_name'];

  switch ($menu_name) {
    case 'main':
      $menu_block_configuration_suggestion = $variables['menu_block_configuration']['suggestion'];

      if ($menu_block_configuration_suggestion === 'main__mobile') {
        $login_link = [
          'title' => t('Log in'),
          'url' => Url::fromRoute('user.login'),
          'is_login_link' => TRUE,
        ];

        // Check if user is logged in.
        if (!\Drupal::currentUser()->isAuthenticated()) {
          $variables['items']['login_link'] = $login_link;
        }
      }

      if ($menu_block_configuration_suggestion === 'main__desktop') {
        $language = Drupal::languageManager()->getCurrentLanguage();
        $current_langcode = $language->getId();
        $items = $variables['items'];
        $current_path = "/$current_langcode" . \Drupal::service('path.current')->getPath() . "?lang=$current_langcode";

        foreach ($items as $key => $item) {
          $is_active = FALSE;
          $below = $item['below'];
          $url = $item['url'];
          $url_string = $url->toString() . "?lang=$current_langcode";
          $variables['items'][$key]['is_active'] = $is_active;
          $variables['items'][$key]['url'] = $url;

          if ($current_path === $url_string) {
            $is_active = TRUE;
          }

          if ($below) {
            foreach ($below as $below_key => $below_item) {
              $is_below_item_active = FALSE;
              $below_url = $below_item['url'];
              $below_url_string = $below_url->toString() . "?lang=$current_langcode";

              if ($current_path === $below_url_string) {
                $is_below_item_active = TRUE;
              }

              $variables['items'][$key]['below'][$below_key]['is_active'] = $is_below_item_active;

              if ($is_active || $is_below_item_active) {
                $variables['items'][$key]['attributes']->addClass('is-active');
              }

              $variables['items'][$key]['below'][$below_key]['url'] = $below_url;
            }
          }
        }
      }

      break;

    case 'user-tools-menu':
      $items = $variables['items']['asu_user_tools_menu.user_name']['below'];

      foreach ($items as $key => $item) {
        $url = $item['url']->toString();
        $current_path = Url::fromRoute('<current>')->toString();
        $is_active = $current_path === $url;
        $variables['items']['asu_user_tools_menu.user_name']['below'][$key]['is_link_active'] = $is_active;
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for taxonomies.
 *
 * {@inheritdoc}
 */
function asuntotuotanto_theme_suggestions_taxonomy_term_alter(&$suggestions, $vars, $hook) {
  $suggestions[] = 'taxonomy_term__' . $vars['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_views_view().
 *
 * {@inheritdoc}
 */
function asuntotuotanto_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  switch ($view_id) {
    case 'news':
      if ($view->getTitle()) {
        $variables['page_title'] = $view->getTitle();
      }

      break;

    case 'applications':
      $current_user = User::load(\Drupal::currentUser()->id());
      $variables['is_email_valid'] = $current_user->get('field_email_is_valid')->getValue()[0]['value'];
      break;
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function asuntotuotanto_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function asuntotuotanto_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

/**
 * Implements hook_form_alter().
 */
function asuntotuotanto_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'user-login-form') {
    $form['name']['#description'] = FALSE;
    $form['pass']['#description'] = FALSE;
  }

  if ($form['#id'] == 'user-pass') {
    unset($form['mail']);
  }

  if ($form['#id'] == 'user-register-form') {
    $form['account']['pass']['#description'] = FALSE;
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'register_form_submit_button';
  }

  if ($form['#id'] == 'user-form') {
    $form['account']['mail']['#description'] = FALSE;
    $form['account']['pass']['#description'] = FALSE;
  }

  if ($form['#id'] == 'asu-application-hitas-add-form') {
    $project_id = $form['#project_id'];
    $elastic = \Drupal::service('asu_api.elasticapi');
    $request = new ProjectApartmentsRequest($project_id);
    $apartmentResponse = $elastic->getApartmentService()
      ->getProjectApartments($request);

    $application_teaser_values = $apartmentResponse->getApplicationTeaserValues();
    $form['application_project_information'] = $application_teaser_values;
  }

  if ($form['#id'] == 'asu-application-haso-add-form') {
    $project_id = $form['#project_id'];
    $elastic = \Drupal::service('asu_api.elasticapi');
    $request = new ProjectApartmentsRequest($project_id);
    $apartmentResponse = $elastic->getApartmentService()
      ->getProjectApartments($request);

    $application_teaser_values = $apartmentResponse->getApplicationTeaserValues();
    $form['application_project_information'] = $application_teaser_values;
  }

  if ($form['#id'] == 'asu-application-hitas-form') {
    $project_id = $form['#project_id'];
    $elastic = \Drupal::service('asu_api.elasticapi');
    $request = new ProjectApartmentsRequest($project_id);
    $apartmentResponse = $elastic->getApartmentService()
      ->getProjectApartments($request);

    $application_teaser_values = $apartmentResponse->getApplicationTeaserValues();
    $form['application_project_information'] = $application_teaser_values;
  }

  if ($form['#id'] == 'asu-application-haso-form') {
    $project_id = $form['#project_id'];
    $elastic = \Drupal::service('asu_api.elasticapi');
    $request = new ProjectApartmentsRequest($project_id);
    $apartmentResponse = $elastic->getApartmentService()
      ->getProjectApartments($request);

    $application_teaser_values = $apartmentResponse->getApplicationTeaserValues();
    $form['application_project_information'] = $application_teaser_values;
  }

  if ($form['#id'] == 'views-exposed-form-faq-faq-page-hitas') {
    $form['actions']['reset']['#attributes']['data-twig-suggestion'] = 'faq_form_reset_button';
  }

  if ($form['#id'] == 'views-exposed-form-faq-faq-page-haso') {
    $form['actions']['reset']['#attributes']['data-twig-suggestion'] = 'faq_form_reset_button';
  }

}

/**
 * Implements hook_preprocess_node().
 */
function asuntotuotanto_preprocess_node(&$variables) {
  $node = Node::load($variables['node']->id());

  if ($node->field_content && !empty($node->field_content->getValue())) {

    foreach ($node->field_content->getValue() as $value) {
      $paragraph = FALSE;

      if (!empty($value['entity'])) {
        $paragraph = $value['entity'];
      }
      elseif (!empty($value['target_id'])) {
        $paragraph = Paragraph::load($value['target_id']);
      }

      if (!empty($paragraph) && $paragraph instanceof Paragraph) {
        if ($paragraph->type->getValue()[0]["target_id"] === "text") {
          $text = strip_tags($paragraph->get('field_text')->value);
          $text = str_replace(["\r", "\n"], ' ', $text);

          if (strlen($text) > 80) {
            if ($variables['view_mode'] === 'teaser_prominent') {
              if (strlen($text) > 230) {
                $text = rtrim(substr($text, 0, 230)) . "...";
              }
            }
            else {
              $text = rtrim(substr($text, 0, 80)) . "...";
            }
          }

          $variables['summary'] = $text;
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_pager(&$variables) {
  // Cast current to be INT instead of FLOAT.
  $variables['current'] = isset($variables['current']) ? (int) $variables['current'] : 1;

  // Check for last pager item href link.
  if (!empty($variables['items']['last']['href'])) {
    $splittedLink = explode("page=", $variables['items']['last']['href'])[1];
    $variables['pager_total_amount'] = (int) $splittedLink + 1;
  }
  else {
    if (!empty($variables['items']['pages'])) {
      $lastArrayItem = end($variables['items']['pages'])['href'];
      $splittedLink = explode("page=", $lastArrayItem)[1];
      $variables['pager_total_amount'] = (int) $splittedLink + 1;
    }
  }
}

/**
 * Custom function format_date_to_unix_timestamp().
 */
function format_date_to_unix_timestamp($string) {
  $value = $string;
  $date = new DateTime($value);
  $timestamp = $date->format('U');

  return $timestamp;
}

/**
 * Custom get_apartment_application_status().
 */
function get_apartment_application_status($application_status) {
  $application_status_mapping = [
    "NONE" => t('No applicants'),
    "LOW" => t('Few applicants'),
    "MEDIUM" => t('A little applicants'),
    "HIGH" => t('A lot of applicants'),
  ];

  return [
    "status" => strtolower($application_status),
    "label" => $application_status_mapping[$application_status],
  ];
}

/**
 *
 */
function asuntotuotanto_preprocess_user(&$variables) {
  $store = \Drupal::service('asu_user.tempstore');
  $fields = \Drupal::config('asu_user.external_user_fields')->get('external_data_map');
  foreach ($fields as $field_name => $field) {
    $variables['content'][$field_name] = $store->get($field_name);
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function asuntotuotanto_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  if ($paragraph_type == 'showcase_block') {
    if ($paragraph->hasField('field_showcases')) {
      $variables['showcases_count'] = count($paragraph->get('field_showcases')->getValue());
    }
  }
}
